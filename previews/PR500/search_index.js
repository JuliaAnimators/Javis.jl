var documenterSearchIndex = {"docs":
[{"location":"references/","page":"References","title":"References","text":"CurrentModule = Javis","category":"page"},{"location":"references/#Public-functions","page":"References","title":"Public functions","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Modules = [Javis]\nPrivate = false","category":"page"},{"location":"references/#Javis.Action","page":"References","title":"Javis.Action","text":"Action <: AbstractAction\n\nAn Action can be used in the keyword arguments of an Object to define small sub objects on the object function, such as appear.\n\nAn Action should not be created by hand but instead by using one of the constructors.\n\nFields\n\nframes::Frames: the frames relative to the parent Object\nanim::Animation: defines the interpolation function for the transition\nfunc::Function: the function that gets called in each of those frames.   Takes the following arguments: video, object, action, rel_frame\ntransition::Union{Nothing, AbstractTransition}\nkeep::Bool defines whether this Action is called even after the last frame it was defined on\ndefs::Dict{Symbol, Any} any kind of definitions that are relevant for the action.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Action-Tuple{Union{Function, Javis.AbstractTransition}}","page":"References","title":"Javis.Action","text":"Action([frames], [Animation], func::Function; keep=true)\n\nAn Action gives an Object or a Layer the opportunity to move, change color or much more. It can be defined in many different ways.\n\nArguments\n\nframes can be a Symbol, a UnitRange or a GFrames to define them in a global way.\nDefault: If not defined it will be the same as the previous Action or   if it's the first action then it will be applied for the whole length of the object.\nIt defines for which frames the action acts on the object.\nThese are defined in a relative fashion so 1:10 means the first ten frames of the object   and not the first ten frames of the Video\nanimation can be an easing function or animation which can be defined by Animations.jl\nDefault: The default is linear()\nPossible simple easing functions is sineio() for more check   Animations.jl\nfunc is the function that describes the actual action\nIt can be a general function which takes in the following four arguments\nvideo, object, action, rel_frame\nIf you don't need them you can write (args...)->your_function(arg1, arg2)\nYou often don't need an own function and instead can use predefined functions like\nappear, disappear, follow_path\n\nKeywords\n\nkeep::Bool defaults to true defines whether the Action is called   even for frames after it's last defined.   In more simple terms: If one has Action(1:10, anim, translate())   It will get translated to the last position on frame 11:END_OF_OBJECT.   One can set ; keep = false to turn off this behavior.\n\nExample\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(500, 500)\nBackground(1:100, ground)\nobj = Object((args...)->circle(O, 50, :fill))\nact!(obj, Action(1:20, appear(:fade)))\nact!(obj, Action(21:50, Translation(50, 50)))\nact!(obj, Action(51:80, Translation(-50, -50)))\nact!(obj, Action(81:100, disappear(:fade)))\nrender(video; pathname=\"test.gif\")\n\nActions can be applied to a layer using a similar syntax\n\nl1 = @JLayer 20:60 100 100 Point(0, 0) begin\n    obj = Object((args...)->circle(O, 50, :fill))\n    act!(obj, Action(1:20, appear(:fade)))\nend\n\nact!(l2, anim_translate(Point(100, 100)))\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.GFrames","page":"References","title":"Javis.GFrames","text":"GFrames\n\nAbility to define frames in a global fashion inside Action.\n\nExample\n\nred_circ = Object(1:90, (args...)->circ(\"red\"))\nblue_circ = Object(21:90, (args...)->circ(\"blue\"))\nact!([red_circ, blue_circ], Action(GFrames(85:90), disappear(:fade)))\n\nis the same as\n\nred_circ = Object(1:90, (args...)->circ(\"red\"))\nblue_circ = Object(21:90, (args...)->circ(\"blue\"))\nact!(red_circ, Action(85:90, disappear(:fade)))\nact!(blue_circ, Action(65:70, disappear(:fade)))\n\nFields\n\nframes::UnitRange defines the frames in a global fashion.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Line","page":"References","title":"Javis.Line","text":"Line\n\nA type to define a line by two points. Can be used i.e. in projection We mean the mathematic definition of a continuous line and not a segment of a line.\n\nFields\n\np1::Point: start point\np2::Point: second point to define the line\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.MorphFunction","page":"References","title":"Javis.MorphFunction","text":"struct MorphFunction\n    func::Function\n    args::Array\n    jpaths::Vector{JPath}\n\nFields\n\nfunc::Function : a function with luxor calls to draw something that objects will be morphed into\nargs : args to the function . Object will be morphed into what is drawn by calling func(args...)\njpaths : The jpaths returned by what is drawn. JPath[] by default, this is populated the first instance it encounters a morph/partial draw at render time.\n\nTODO: find a better place(file) to put these functions and structs. \n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Object","page":"References","title":"Javis.Object","text":"Object\n\nDefines what is drawn in a defined frame range.\n\nFields\n\nframes::Frames: A range of frames for which the Object is called\nfunc::Function: The drawing function which draws something on the canvas.   It gets called with the arguments video, object, frame\nstart_pos::Union{Object, Point} defines the origin of the object. It gets translated to this point\nactions::Vector{AbstractAction} a list of actions applied to this object\ncurrent_setting:: The current state of the object see ObjectSetting\nopts::Any can hold any options defined by the user\nchange_keywords::Dict{Symbol,Any} the modified keywords changed by change\nresult::Vector the result of the object (if something gets returned)\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Object-Tuple{Any, Function, Union{Point, Object}}","page":"References","title":"Javis.Object","text":"Object([frames], func::Function, [start_pos]; kwargs...)\n\nArguments\n\nframes can be a Symbol, a UnitRange or a relative way to define frames see RFrames\nDefault: If not defined it will be the same as the previous Object.\nImportant: The first Object needs the frames specified as a UnitRange.\nIt defines for which frames the object is active\nfunc is a Function and the only required argument\nThis defines the actual object that gets drawn.\nThe function takes the following three arguments:\nvideo, object, frame\nIf you don't need them you can write (args...)->your_function(arg1, arg2)\n\nExample\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(500, 500)\nBackground(1:100, ground)\nObject((args...)->circle(O, 50, :fill))\nrender(video; pathname=\"test.gif\")\n\nHere the Background uses the named way of defining the function whereas the circle object is defined in the anonymous function (args...)->circle(O, 50, :fill). It basically depends whether you want to have a simple Luxor object or something more complex.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.RFrames","page":"References","title":"Javis.RFrames","text":"RFrames\n\nAbility to define frames in a relative fashion.\n\nExample\n\nBackground(1:100, ground)\nObject(1:90, (args...)->circ(\"red\"))\nObject(RFrames(10), (args...)->circ(\"blue\"))\nObject((args...)->circ(\"red\"))\n\nis the same as\n\nBackground(1:100, ground)\nObject(1:90, (args...)->circ(\"red\"))\nObject(91:100, (args...)->circ(\"blue\"))\nObject(91:100, (args...)->circ(\"red\"))\n\nFields\n\nframes::UnitRange defines the frames in a relative fashion.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.RFrames-Tuple{Int64}","page":"References","title":"Javis.RFrames","text":"RFrames(i::Int)\n\nShorthand for RFrames(1:i)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Transformation","page":"References","title":"Javis.Transformation","text":"Transformation\n\nDefines a transformation which can be returned by an object to be accessible later. This is further explained in the Javis tutorials.\n\nFields\n\npoint::Point: the translation part of the transformation\nangle::Float64: the angle component of the transformation (in radians)\nscale::Tuple{Float64, Float64}: the scaling component of the transformation\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Video","page":"References","title":"Javis.Video","text":"Video\n\nDefines the video canvas for an animation.\n\nFields\n\nwidth::Int the width in pixel\nheight::Int the height in pixel\nobjects::Vector{AbstractObject} the objects defined in this video\nlayers::Vector{AbstractObject} the layers defined in this video\nbackground_frames::Vector{Int} saves for which frames a background is defined\ndefs::Dict{Symbol, Any} Some definitions which should be accessible throughout the video.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Video-Tuple{Any, Any}","page":"References","title":"Javis.Video","text":"Video(width, height)\n\nCreate a video with a certain width and height in pixel. This also sets CURRENT_VIDEO.\n\n\n\n\n\n","category":"method"},{"location":"references/#Base.:*-Tuple{Matrix{Float64}, Transformation}","page":"References","title":"Base.:*","text":"Base.:*(m::Array{Float64,2}, transformation::Transformation)\n\nConvert the transformation to a matrix and multiplies m*trans_matrix. Return a new Transformation\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Background-Tuple{Any, Function, Vararg{Any}}","page":"References","title":"Javis.Background","text":"Background(frames, func)\n\nThe Background is internally just an Object and can be defined the same way. In contrast to an object this a Background will change the global canvas and not just a layer. Normally it's used to define defaults and the background color. See Luxor.background\n\nExample\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(500, 500)\nBackground(1:100, ground)\nObject((args...)->circle(O, 50, :fill))\nrender(video; pathname=\"test.gif\")\n\nThis draws a white circle on a black background as sethue is defined for the global frame.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JBox-Tuple{Array}","page":"References","title":"Javis.JBox","text":"JBox(points::Array; color=\"black\", action=:stroke, vertices=false)\n\nCreate a box/rectangle using the first two points of an array of Points to defined opposite corners. Returns the top left corner point of the box.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JBox-Tuple{Int64, Int64, Real, Real}","page":"References","title":"Javis.JBox","text":"JBox(x::Int64, y::Int64, width::Real, height::Real; color=\"black\", action=:stroke)\n\nCreate a box/rectangle centered at point x/y with width and height.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JBox-Tuple{Point, Point}","page":"References","title":"Javis.JBox","text":"JBox(cornerpoint1::Point, cornerpoint2::Point; color=\"black\", action=:stroke, vertices=false)\n\nCreate a box (rectangle) between two points and do an action. Returns the top left corner point of the box.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JBox-Tuple{Point, Real, Real, Float64}","page":"References","title":"Javis.JBox","text":"JBox(pt::Point, width::Real, height::Real, cornerradius::Float64; color=\"black\", action=:stroke)\n\nDraw a box/rectangle centered at point pt with width and height and round each corner by cornerradius.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JBox-Tuple{Point, Real, Real}","page":"References","title":"Javis.JBox","text":"JBox(pt::Point, width::Real, height::Real; color=\"black\", action=:stroke, vertices=false)\n\nCreate a box/rectangle centered at point pt with width and height. Use vertices=true to return an array of the four corner points rather than draw the box.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JCircle-Tuple{Point, Real}","page":"References","title":"Javis.JCircle","text":"1. JCircle(center::Point, radius::Real; kwargs...)\n2. JCircle(center_x::Real, center_y::Real, radius::Real; kwargs...)\n3. JCircle(p1::Point, p2::Point; kwargs...)\n    - A circle that touches `p1` and `p2`\n4. JCircle(radius::Real)\n    - A circle at the origin\n\nDraw a circle at center with the given radius\n\nKeywords for all\n\ncolor = \"black\"\nlinewidth = 2\naction::Symbol :stroke by default can be :fill or other actions explained in the Luxor documentation.\n\nReturns the center of the circle\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JEllipse-Tuple{Point, Point, Point}","page":"References","title":"Javis.JEllipse","text":"JEllipse(focus1::Point, focus2::Point, pt::Point; color=\"black\", linewidth=2, action=:stroke, stepvalue=pi/100, reversepath=false)\n\nBuild a polygon approximation to an ellipse, given two points and a point somewhere on the ellipse.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JEllipse-Tuple{Point, Point, Real}","page":"References","title":"Javis.JEllipse","text":"JEllipse(focus1::Point, focus2::Point, k::Real; color=\"black\", linewidth=2, action=:stroke, stepvalue=pi/100, vertices=false, reversepath=false)\n\nBuild a polygon approximation to an ellipse, given two points and a distance, k, which is the sum of the distances to the focii of any points on the ellipse (or the shortest length of string required to go from one focus to the perimeter and on to the other focus).\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JEllipse-Tuple{Point, Real, Real}","page":"References","title":"Javis.JEllipse","text":"1. JEllipse(cpt::Point, w::Real, h::Real; kwargs...)\n2. JEllipse(xcenter::Int, ycenter::Int, w::Real, h::Real; kwargs...)\n\nMake an ellipse, centered at point c, with width w, and height h. Returns the center of the ellipse.\n\nKeywords for all\n\ncolor = \"black\"\nlinewidth = 2\naction::Symbol :stroke by default can be :fill or other actions explained in the Luxor documentation.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JLine-Tuple{Point, Point}","page":"References","title":"Javis.JLine","text":"1. JLine(pt1::Point, pt2::Point; kwargs...)\n2. JLine(pt2::Point; kwargs...)\n    - `pt1` is set as the origin `O`\n\nKeywords for all\n\ncolor = \"black\"\nlinewidth = 2\n\nDraw a line between the points pt1 and pt2. Returns the final point of the line\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JPoly-Tuple{Vector{Point}}","page":"References","title":"Javis.JPoly","text":"JPoly(pointlist::Vector{Point}; color=\"black\", linewidth=2, action = :stroke, close=true, reversepath=false)\n\nDraw a polygon around points in the pointlist.\n\nKeywords\n\ncolor specifies the color of the outline or the fill of it (depends on action)\nlinewidth linewidth of the outline\naction can be :stroke, :fill or other symbols (check the Luxor documentation for details) (default: :stroke)\nclose whether the polygon should be closed or not (default: closed) \nreversepath can be set to true to reverse the path and create a polygon hole\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JRect-Tuple{Point, Real, Real}","page":"References","title":"Javis.JRect","text":"1. JRect(cornerpoint::Point, w::Real, h::Real; kwargs...)\n2. JRect(xmin::Int64, ymin::Int64, w::Real, h::Real; kwargs...)\n    - same as 1. with `cornerpoint = Point(xmin, ymin)`\n\nCreate a rectangle with one corner at cornerpoint with width w and height h and do an action. You can specify the linewidth and the color of the rectangle.\n\nKeywords for all\n\ncolor = \"black\"\nlinewidth = 2\naction Defines whether the rectangle should be outlined (:stroke) or filled (:fill)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.JStar-Tuple{Point, Any}","page":"References","title":"Javis.JStar","text":"1. JStar(center::Point, radius; kwargs...)\n2. JStar(xcenter, ycenter, radius; kwargs...)\n    - same as 1. with `center = Point(xcenter, ycenter)`\n\nDraw a star centered at a position.  Return the center of the star.\n\nKeywords for all\n\ncolor color of the outline or fill of the star (default: \"black\")\nlinewidth linewidth of the outline (default: 2)\naction defines whether the rectangle should be outlined (:stroke) or filled (:fill)\nnpoints number of points the star has (default: 5)\nratio height of the smaller radius relative to the larger radius (default: 0.5)\norientation orientation of the star given by an angle (default: 0)\nreversepath if true it reverses the path and therefore creates a hole (default: true)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.act!-Tuple{Javis.AbstractObject, Javis.AbstractAction}","page":"References","title":"Javis.act!","text":"act!\n\nAdds an [Action] or a list of actions to an Object / Layer or a list of objects/layers. One key different to note is that an action is applied to a layer as a whole and not on the objects inside it.\n\nExample\n\nBackground(1:100, ground)\nobj = Object((args...) -> rect(O, 50, 50, :fill), Point(100, 0))\nact!(obj, Action(1:50, anim_scale(1.5)))\n\nHere the scaling is applied to the rectangle for the first fifty frames.\n\nOptions\n\nA single object/layer and action:\nact!(object::AbstractObject, action::AbstractAction)\nobject::AbstractObject - the object the action is applied to\naction::AbstractAction - the action applied to the object\nA single object/layer and a list of actions:\nact!(object::AbstractObject, action)\nobject::AbstractObject - the object actions are applied to\nactions - the actions applied to an object Attention: Will fail if actions is not iterable\nA list of objects/layers and a list of actions:\nact!(object::Vector{<:AbstractObject}, action::Vector{<:AbstractAction})\nobject::Vector{<:AbstractObject} - the objects actions are applied to\naction::Vector{<:AbstractAction} - the actions applied to the objects\n\nActions can be applied to a layer using a similar syntax\n\nl1 = Javis.@Javis.Layer 20:60 100 100 Point(0, 0) begin\n    obj = Object((args...)->circle(O, 50, :fill))\n    act!(obj, Action(1:20, appear(:fade)))\nend\n    \nact!(l1, anim_translate(Point(100, 100)))\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.ang-Tuple{Any}","page":"References","title":"Javis.ang","text":"ang(x)\n\nang is just a short-hand for get_angle\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.anim_rotate-Tuple{Real}","page":"References","title":"Javis.anim_rotate","text":"anim_rotate\n\nAnimate the rotation of the attached object (see act!). Similiar function: anim_rotate_around to rotate around a point\n\nExample\n\nBackground(1:100, ground)\nobj = Object((args...) -> rect(O, 50, 50, :fill), Point(100, 0))\nact!(obj, Action(1:50, anim_rotate(2π)))\n\nOptions\n\nanim_rotate(ta::Real) define the end angle of the rotation\nanim_rotate(fa::Real, ta::Real) define the from and end angle\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.anim_rotate_around-Tuple{Real, Any}","page":"References","title":"Javis.anim_rotate_around","text":"anim_rotate_around\n\nAnimate the rotation of the attached object (see act!) around a point. Similiar function: anim_rotate to rotate or spin an object\n\nExample\n\nBackground(1:100, ground)\nobj = Object((args...) -> rect(O, 50, 50, :fill), Point(100, 0))\nact!(obj, Action(1:50, anim_rotate_around(2π, O)))\n\nOptions\n\nanim_rotate_around(ta::Real, p) define the end angle of the rotation + the rotation center.\nanim_rotate_around(fa::Real, ta::Real, p) define the from and end angle + the rotation center.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.anim_scale-Tuple{Any}","page":"References","title":"Javis.anim_scale","text":"anim_scale\n\nAnimate the scaling of the attached object (see act!). Attention: Scaling is always done from the current origin.\n\nExample\n\nBackground(1:100, ground)\nobj = Object((args...) -> rect(O, 50, 50, :fill), Point(100, 0))\nact!(obj, Action(1:50, anim_scale(1.5)))\n\nOptions\n\nanim_scale(ts) scales from the current scale to ts.\nanim_scale(fs, ts) scales from fs to ts.\n\nThe scales itself should be either a Float64 or a tuple of Float64 or a reference to an object if the object itself returns a value like that.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.anim_translate-Tuple{Real, Real}","page":"References","title":"Javis.anim_translate","text":"anim_translate\n\nAnimate the translation of the attached object (see act!).\n\nExample\n\nBackground(1:100, ground)\nobj = Object((args...) -> circle(O, 50, :fill), Point(100, 0))\nact!(obj, Action(1:50, anim_translate(10, 10)))\n\nOptions\n\nanim_translate(x::Real, y::Real) define by how much the object should be translated. The end point will be current_pos + Point(x,y)\nanim_translate(tp::Point) define direction and length of the translation vector by using Point\nanim_translate(fp::Union{Object,Point}, tp::Union{Object,Point}) define the from and to point of a translation. It will be translated by tp - fp.\nObject can be used to move to the position of another object\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.appear-Tuple{Symbol}","page":"References","title":"Javis.appear","text":"appear(s::Symbol)\n\nAppear can be used inside an Action to make an Object or an entire Object (including it's objects) to appear.\n\nExample\n\nhouse = Object(101:200, (args...)->house_of_nicholas())\nact!(house, Action(1:20, appear(:fade)))\nact!(house, Action(81:100, disappear(:fade)))\n\nIn this case the house_of_nicholas will fade in during the first 20 frames of the Object so 101-120.\n\nArguments\n\ns::Symbol: the symbol defines the animation of appearance   The only symbols that are currently supported are:\n:fade_line_width which increases the line width up to the default value  or the value specified by setline\n:fade which increases the opcacity up to the default value  or the value specified by setopacity\n:scale which increases the scale up to the default value 1  or the value specified by scale\n:draw_text which only works for text and lets it appear from left to right.\n\nFor a layer only appear(:fade) is supported\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.background-Tuple{Any}","page":"References","title":"Javis.background","text":"background(str)\n\nHas bacially the same functionality as Luxor.background() but overrides that method to allow for transparent layers.\n\nChecks if a layer should be present, and if a background has been defined or not for the current layer.\n\nArguments\n\nbackground_color background color\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.cancel_stream-Tuple{}","page":"References","title":"Javis.cancel_stream","text":"cancel_stream()\n\nSends a SIGKILL signal to the livestreaming process. Though used internally, it can be used stop streaming. However this method is not guaranted to end the stream on the client side.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.change-Tuple{Symbol, Pair}","page":"References","title":"Javis.change","text":"change(s::Symbol, [val(s)])\n\nChanges the keyword s of the parent Object from vals[1] to vals[2] in an animated way if vals is given as a Pair otherwise it sets the keyword s to val.\n\nArguments\n\ns::Symbol Change the keyword with the name s\nvals::Pair If vals is given i.e 0 => 25 it will be animated from 0 to 25.\nThe default is to use 0 => 1 or use the value given by the animation\ndefined in the Action\n\nExample\n\nBackground(1:100, ground)\nobj = Object((args...; radius = 25, color=\"red\") -> object(O, radius, color), Point(100, 0))\nact!(obj, Action(1:50, change(:radius, 25 => 0)))\nact!(Action(51:100, change(:radius, 0 => 25)))\nact!(Action(51:100, change(:color, \"blue\")))\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.disappear-Tuple{Symbol}","page":"References","title":"Javis.disappear","text":"disappear(s::Symbol)\n\nDisappear can be used inside an Action to make an Object or an entire Layer (including it's objects) to disappear.\n\nExample\n\nhouse = Object(101:200, (args...)->house_of_nicholas())\nact!(house, Action(1:20, appear(:fade)))\nact!(house, Action(81:100, disappear(:fade)))\n\nIn this case the house_of_nicholas will fade out during the last 20 frames of the Object so 181-200.\n\nArguments\n\ns::Symbol: the symbol defines the animation of disappearance   The only symbols that are currently supported are:\n:fade_line_width which decreases the line width down to 0\n:fade which decreases the opacity down to 0\n:scale which decreases the scale down to 0\n:draw_text which only works for text and let the text disappear from right to left.\n\nFor a layer only disappear(:fade) is supported\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_grid-Tuple{}","page":"References","title":"Javis.draw_grid","text":"draw_grid(video::Video, object::AbstractObject, frame::Int; direction::AbstractString = \"TR\", line_gap = 25)\n\nDraws an oriented grid on the given frame of a Video.\n\nArguments\n\ndirection::AbstractString: Where grid animation finishes. Default: \"TR\" Available Orientations:\n\"TR\" - Animation finishes in the Top Right corner of the frame.\n\"TL\" - Animation finishes in the Top Left corner of the frame.\n\"BR\" - Animation finishes in the Bottom Right corner of the frame.\n\"BL\" - Animation finishes in the Bottom Left corner of the frame.\nline_gap: How many pixels between each line. Default: 25\n\nExample\n\nExample call of this function within an Object.\n\n Object(1:100, :line, draw_grid(direction = \"TL\", line_gap = 25))\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.drawpartial-Tuple{Real}","page":"References","title":"Javis.drawpartial","text":" drawpartial(fraction::Real)\n\nReturns a function to be used with Action , draws  the object upto a fraction of itself.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.follow_path-Tuple{Vector{Point}}","page":"References","title":"Javis.follow_path","text":"follow_path(points::Vector{Point}; closed=true)\n\nCan be applied inside an action such that the parent object follows a path. It takes a vector of points which can be created as an example by calling circle(O, 50). Notice that the object is set to :none, the default.\n\nExample\n\nAction(1:150, follow_path(star(O, 300)))\n\nArguments\n\npoints::Vector{Point} - the vector of points the object should follow\n\nKeywords\n\nclosed::Bool default: true, sets whether the path is a closed path as for example when   using a circle, ellipse or any polygon. For a bezier path it should be set to false.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.fontsize-Tuple{Any}","page":"References","title":"Javis.fontsize","text":"fontsize(fsize)\n\nSame as Luxor.fontsize: Sets the current font size.\n\nExample\n\nfontsize(12)\ntext(\"Hello World!\")\n\nArguments:\n\nfsize: the new font size\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_angle-Tuple{Javis.AbstractObject}","page":"References","title":"Javis.get_angle","text":"get_angle(obj::AbstractObject)\n\nGet access to the angle that got saved in a previous object.\n\nReturns\n\nFloat64: the angle stored by a previous object i.e via return Transformation(p, angle)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_fontsize-Tuple{}","page":"References","title":"Javis.get_fontsize","text":"get_fontsize(fsize)\n\nSame as Luxor.get_fontsize but works with every version of Luxor that is supported by Javis.\n\nExample\n\nfontsize(12)\nfsize = get_fontsize()\ntext(\"Hello World! $fsize\")\n\nReturns\n\nFloat64: the current font size\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_position-Tuple{Javis.Layer}","page":"References","title":"Javis.get_position","text":"get_position(l::Layer)\n\nGet access to the position of a layer.\n\nReturns\n\nPoint: the point stored by the layer.\n\nThrows\n\nIf the function of Layer didn't return a Point or Transformation\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_position-Tuple{Object}","page":"References","title":"Javis.get_position","text":"get_position(obj::Object)\n\nGet access to the position that got saved in a previous object.\n\nReturns\n\nPoint: the point stored by a previous object.\n\nThrows\n\nIf the function of Object didn't return a Point or Transformation\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_scale-Tuple{Javis.AbstractObject}","page":"References","title":"Javis.get_scale","text":"get_scale(obj::AbstractObject)\n\nGet access to the scaling that got saved in a previous object.\n\nReturns\n\nScaling: the scale stored by a previous object.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_value-Tuple{Javis.AbstractObject}","page":"References","title":"Javis.get_value","text":"get_value(obj::AbstractObject)\n\nReturns the value saved by obj\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.latex-Tuple{LaTeXStrings.LaTeXString, Point, Symbol}","page":"References","title":"Javis.latex","text":"latex(text::LaTeXString, pos::Point, object::Symbol; valign = :top, halign = :left)\n\nAdd the latex string text to the top left corner of the LaTeX path. Can be added to Luxor.jl graphics via Video.\n\nNOTES:\n\nThis only works if tex2svg is installed.   It can be installed using the following command (you may have to prefix this command with sudo depending on your installation):\n  npm install -g mathjax-node-cli\nThe latex method must be called from within an Object.\n\nArguments\n\ntext::LaTeXString: a LaTeX string to render.\npos::Point: position of the upper left corner of the latex text. Default: O\ncan be written as x, y instead of Point(x, y)\nobject::Symbol: graphics objects defined by Luxor.jl. Default :stroke.\n\nAvailable objects:\n\n:stroke - Draws the latex string on the canvas. For more info check Luxor.strokepath\n:path - Creates the path of the latex string but does not render it to the canvas.\n\nKeywords:\n\nvalign::Symbol=:top: vertical alignment with respect to the specified pos parameter.\nOptions available are :top, :middle, :bottom\nhalign::Symbol=:left: horizontal alignment with respect to the specified pos parameter.\nOptions available are :left, :center/:centre, :right\n\nThrows\n\nIOError: mathjax-node-cli is not installed\n\nWarning\n\nShows a warning if either of the alignment options are unrecognised.\n\nExample\n\nusing Javis\nusing LaTeXStrings\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction draw_latex(video, object, frame)\n    fontsize(50)\n    x = 100\n    y = 120\n    latex(L\"\\sqrt{5}\", x, y)\nend\n\ndemo = Video(500, 500)\nBackground(1:2, ground)\nObject(draw_latex)\nrender(demo; pathname = \"latex.gif\")\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.morph","page":"References","title":"Javis.morph","text":"morph(samples = 100)\n\nmorph() to be used with Action, when an animation from Animations.jl is provided with Animation{MorphFunction} . Default samples for every polygon is 100, increase this if needed. Animation must be of type Animation{MorphFunction} or Animation{Object} when passing morph() to Action.\n\nAnimation{MorphFunction} can be made using the following syntax. (constructors for the following signatures  are written to return the apropriate Animation{MorphFunction})\n\nanim = Animation([0,a1,a2,...,an,1] , MorphFunction[ (func0,args0), (func1,args1) , (func2,args2) ...  (funcn,argsn), (func_fin,args_fin) ])\n\n0< a1 < a2 < a3... < an < 1.0\n\nif your functions dont take any arguments then you may also use...\n\nAnimation([0,a1...,a_n,1] , [ f0 , f1 , f2 ...,f_n, f_fin] )\n\nThe first element is a function. Arguments to be passed to the function can either be wrapped in an Array  or as subsequent elements in the Tuple  for example the following two lines have the same effect.\n\nMorphFunction[(func1,[arg11,arg12,arg13]), (func2,[arg21,arg22]) ]\nMorphFunction[(func1,arg1,arg2,arg3), (func2,arg21,arg22)]\n\nAnimation can also be of type Animation{Object}\n\nanim = Animation([0,a1 ... , a_n , 1 ] , [obj, obj1, obj2 , ... objn , obj_fin] )\n\nExample\n\nusing Javis\nusing Animations\nvideo = Video(500,500)\nnframes = 160 \n\nfunction circdraw(colo)\n    sethue(colo)\n    setopacity(0.5)\n    circle(O,50,:fillpreserve)\n    setopacity(1.0)\n    sethue(\"white\")\n    strokepath()\nend\n\nfunction boxdraw(colo)\n    sethue(colo)\n    box(O,100,100,:fillpreserve)\n    setopacity(1.0)\n    sethue(\"white\")\n    strokepath()\nend\n\nfunction stardraw()\n    sethue(\"white\")\n    star(O,100,5,0.5,0.0,:stroke)\nend\n\nBackground(1:nframes+10,(args...)->background(\"black\"))\nboxobj = Object(1:nframes+10 , (args...) -> boxdraw(\"green\") )\nanim = Animation([0, 0.7, 1],[(boxdraw, [\"green\"]), stardraw, (circdraw, \"red\")])\n\n\naction = Action(1:nframes,anim,morph())\nact!(boxobj,action)\nrender(video,pathname=\"box_to_star_to_circ.gif\")\n\nAbove snippet morphs a Box to a Star then to a Circle\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis.morph_to-Tuple{Object}","page":"References","title":"Javis.morph_to","text":"morph_to(to_func::Function; samples=100)\n\nA closure for the _morph_to function. To be used with Action. morph_to will morph an object into whatever is drawn by the to_func passed to it.\n\nArguments\n\nto_func::Function: Function that defines what the object should be morphed into\n\nKeywords\n\nsamples : Number of points to resample every polygon to for the morphing\n\nLimitations\n\ncant handle clips inside to_func or the object\nsethue animation doesnt work with this , since the color's to be morphed into are derived from the object and to_func. to change hue while morphing , change it in the to_func\n\nExample\n\nThis creates a star that morphs into a circle and back.\n\nastar() = star(O, 50, 5, 0.5, 0)\nacirc() = circle(O, 50)\n\nvideo = Video(500, 500)\nback = Background(1:20, ground)\nstar_obj = Object(1:10,(args...)-> astar())\nact!(star_obj, Action(linear(), morph_to(acirc)))\nact!(star_obj, Action(11:20, morph_to(astar)))\n\n    morph_to(to_obj::Object; samples=100)\n\nMorphs one object into another object.\n\n# Arguments\n- `to_obj::Object`: Object that defines what the object should be morphed into\n                       \n# Keywords\n- `samples` : Number of points to resample every polygon to for the morphing\n\n# Limitations\n- cant handle clips inside `to_func` or the `object`\n- sethue animation doesnt work with this , since the color's to be morphed into are derived from the `object` and `to_func`. to change hue while morphing , change it in the `to_func`\n\n# Example\n\nThis creates a star that morphs into a circle.\n\n\njulia astar() = star(O, 50, 5, 0.5, 0) acirc() = circle(O, 50)\n\nvideo = Video(500, 500) back = Background(1:20, ground) starobj = Object(1:10,(args...)-> astar()) circobj = Object(1:10,(args...)-> acirc()) act!(starobj, Action(linear(), morphto(acirc))) ```\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.pos-Tuple{Any}","page":"References","title":"Javis.pos","text":"pos(x)\n\npos is just a short-hand for get_position\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.prev_end-Tuple{}","page":"References","title":"Javis.prev_end","text":"prev_end()\n\nThe end frame of the previous object or for an action the end frame of the parental object. Can be used to provide frame ranges like:\n\n@Frames(prev_end()-10, 10)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.prev_start-Tuple{}","page":"References","title":"Javis.prev_start","text":"prev_start()\n\nThe start frame of the previous object or for an action the start frame of the parental object. Can be used to provide frame ranges like:\n\n@Frames(prev_start(), 10)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.projection-Tuple{Point, Line}","page":"References","title":"Javis.projection","text":"projection(p::Point, l::Line)\n\nReturn the projection of a point to a line.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.render-Tuple{Video}","page":"References","title":"Javis.render","text":"render(\n    video::Video;\n    framerate=30,\n    pathname=\"javis_GIBBERISH.gif\",\n    liveview=false,\n    streamconfig::Union{StreamConfig, Nothing} = nothing,\n    tempdirectory=\"\",\n    ffmpeg_loglevel=\"panic\",\n    rescale_factor=1.0,\n    postprocess_frame=identity,\n    postprocess_frames_flow=default_postprocess\n)\n\nRenders all previously defined Object drawings to the user-defined Video as a gif or mp4.\n\nArguments\n\nvideo::Video: The video which defines the dimensions of the output\n\nKeywords\n\nframerate::Int: The frame rate of the video\npathname::String: The path for the rendered gif or mp4 (i.e output.gif or output.mp4)\nDefault: The animation is rendered as a gif with the javis_ prefix and some gibberish afterwards\nliveview::Bool: Causes a live image viewer to appear to assist with animation development\nstreamconfig::Union{StreamConfig, Nothing}: Contains livestream specific instructions, passed on to setup_stream.\n\nStreaming to Twitch or other platforms are not yet supported.\n\ntempdirectory::String: The folder where each frame is stored   Defaults to a temporary directory when not set\nffmpeg_loglevel::String:\nCan be used if there are errors with ffmpeg. Defaults to panic:\nAll other options are described here: https://ffmpeg.org/ffmpeg.html\nrescale_factor::Float64 factor to which the frames should be rescaled for faster rendering\npostprocess_frame::Function function that is applied to the imagematrix of each frame after they have been computed \n\ntakes as argument frame_image, frame, frames, useful to apply a postprocessing e.g. blur to all or some  of the images. By default it is the identity and nothing happens.\n\npostprocess_frames_flow::Function function that is applied to the vector of the frames indices should return a new vector \n\nwhere elements are a subset of the number of frames. Useful to reorder the frames, e.g. reverse the video with  postprocess_frames_flow=reverse. By default it is the identity and nothing happens.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.rev-Tuple{Animations.Easing}","page":"References","title":"Javis.rev","text":"rev(e::Easing)\n\nReverse an easing function such that easing_to_animation maps it to [1.0, 0.0] instead of [0.0, 1.0]. An example can be seen in rotate\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.rotate_around-Tuple{Any}","page":"References","title":"Javis.rotate_around","text":"rotate_around(p)\n\nRotate an Object or a Layer using an Action and an Animation defined with Animations.jl around a point p. For rotate it rotates around the current origin.\n\nAn example can be seen in rotate.\n\nArguments\n\np: the point to rotate around\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scale-Tuple{Any, Any}","page":"References","title":"Javis.scale","text":"scale(scl_x, scl_y)\n\nSame as scale but the x scale and y scale can be changed independently.\n\nArguments:\n\nscl_x: scale in x direction\nscl_y: scale in y direction\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scale-Tuple{Number}","page":"References","title":"Javis.scale","text":"scale(scl)\n\nSet the scale and multiply it with the current multiplier which is i.e. set by appear and disappear.\n\nNormal behavior without any animation is the same as Luxor.scale.\n\nExample\n\nscale(0.5)\ncircle(O, 20, :fill) # the radius would be 10 because of the scaling\n\nArguments:\n\nscl: the new default scale\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scale-Tuple{}","page":"References","title":"Javis.scale","text":"scale()\n\nScale a function defined inside an Action using an Animation defined with Animations.jl.\n\nAn example can be seen in rotate.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scale_linear-NTuple{4, Any}","page":"References","title":"Javis.scale_linear","text":"scale_linear(fmin, fmax, tmin, tmax; clamp=true)\n\nCreating a mapping which takes values from fmin to fmax and outputs values ranging from tmin to tmax.  If the input is outside the range it will be by default clamped to the fmin - fmax. This can be prevented by setting clamp=false.\n\nExample\n\nscale = scale_linear(0, 10, 0, 100)\nscale(5) # returns 50\n\nscale_point = scale_linear(O, Point(10, 10), O, Point(100, 100))\nscale_point(Point(7,8)) # returns Point(70, 80)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scaleto-Tuple{Any, Any}","page":"References","title":"Javis.scaleto","text":"scaleto(x, y)\n\nScale to a specific scaling instead of multiplying it with the current scale. For scaling on top of the current scale have a look at scale.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.scl-Tuple{Any}","page":"References","title":"Javis.scl","text":"scl(x)\n\nscl is just a short-hand for get_scale\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.setline-Tuple{Any}","page":"References","title":"Javis.setline","text":"setline(linewidth)\n\nSet the line width and multiply it with the current multiplier which is i.e. set by appear and disappear.\n\nNormal behavior without any animation is the same as Luxor.setline.\n\nExample\n\nsetline(10)\nline(O, Point(10, 10))\n\nArguments:\n\nlinewidth: the line width in pixel\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.setopacity-Tuple{Any}","page":"References","title":"Javis.setopacity","text":"setopacity(opacity)\n\nSet the opacity and multiply it with the current multiplier which is i.e. set by appear and disappear.\n\nNormal behavior without any animation is the same as Luxor.setopacity.\n\nExample\n\nsetopacity(0.5)\ncircle(O, 20, :fill)\n\nArguments:\n\nopacity: the opacity between 0.0 and 1.0\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.setopacity-Tuple{}","page":"References","title":"Javis.setopacity","text":"setopacity()\n\nSet the color of an Object or a Layer using an Action and an Animation defined with Animations.jl.\n\nExample\n\nA possible animation would look like this:\n\nopacity_anim = Animation(\n    [0, 0.5, 1], # must go from 0 to 1\n    [\n        0.0,\n        0.3,\n        0.7,\n    ],\n    [sineio(), sineio()],\n)\n\nAn example on how to integrate this into an Action can be seen in rotate. Where this would be a valid Action: Action(1:150, opacity_anim, setopacity()).\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.setup_stream","page":"References","title":"Javis.setup_stream","text":"setup_stream(livestreamto=:local; protocol=\"udp\", address=\"0.0.0.0\", port=14015, twitch_key=\"\")\n\nSets up the livestream configuration. NOTE: Twitch not fully implemented, do not use.\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis.showcreation-Tuple{}","page":"References","title":"Javis.showcreation","text":"    showcreation()\n\nReturns a function to be used with Action. Shows the creation of the object incrementally. \n\nEx.\n\nBackground(1:nframes+60,(args...)->ground())\nboxobj = Object(1:nframes+60 , (args...) -> boxdraw(\"green\") )\naction_create = Action(1:nframes÷2,sineio(),showcreation())\nact!(boxobj,action_create)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.showdestruction-Tuple{}","page":"References","title":"Javis.showdestruction","text":"showdestruction()\n\nSimilar to showcreation but un-draws the object.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.text","page":"References","title":"Javis.text","text":"text(str, pos = O; valign = :baseline, halign = :left, angle = 0.0)\n\nHas bacially the same functionality as Luxor.text but overrides that method to allow to animate text with appear.\n\nExample\n\ntext_obj = Object(1:100, (args...) -> text(\"Hello Stream!\"; halign = :center))\nact!(text_obj, Action(1:15, sineio(), appear(:draw_text)))\nact!(text_obj, Action(76:100, sineio(), disappear(:draw_text)))\n\ndraws the text from left to right in the first 15 frames and in the last 15 frames it disappears.\n\nArguments\n\nstr::AbstractString the string that should be shown\npos::Point defaults to the origin and can be written as x,y as well as Point(x,y).\n\nKeywords\n\nvalign::Symbol defaults to :baseline and takes (:top, :middle, :bottom, :baseline)\nhalign::Symbol defaults to :left and takes (:left, :center, :centre, :right)\nangle::Float64 defaults to 0.0 and specifies the angle of the text\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis.val-Tuple{Any}","page":"References","title":"Javis.val","text":"val(x)\n\nval is just a short-hand for get_value\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.zero_lines-Tuple{}","page":"References","title":"Javis.zero_lines","text":"zero_lines(video::Video, object::AbstractObject, frame::Int; direction::AbstractString = \"TR\",             line_thickness = 10)\n\nDraws zero lines on the given frame of a Video.\n\nArguments\n\ndirection::AbstractString: Direction for how vertical and horizontal axes are drawn.\n\nDefault: \"TR\" Available Orientations:\n\n\"TR\" - Vertical axis drawn towards the Top and horizontal axis drawn to the Right of the frame.\n\"TL\" - Vertical axis drawn towards the Top and horizontal axis drawn to the Left of the frame.\n\"BR\" - Vertical axis drawn towards the Bottom and horizontal axis drawn to the Right of the frame.\n\"BL\" - Vertical axis drawn towards the Bottom and horizontal axis drawn to the Left of the frame.\nline_thickness: Defines the thickness of the zero lines. Default: 10\n\nExample\n\nThis example will produce an animation with the vertical axis being drawn towards the top and the horizontal axis being drawn towards the left. One will need to define their own path for tempdirectory and pathname.\n\n Object(1:100, :line, zero_lines(direction = \"TL\", line_thickness = 10)),\n\n\n\n\n\n","category":"method"},{"location":"references/#Luxor.pathtopoly-Tuple{Val{:costate}}","page":"References","title":"Luxor.pathtopoly","text":"pathtopoly(::Val{:costate})\n\nMethod similar to Luxors pathtopoly(). Converts the current path to an array of polygons and returns them. This function also returns an array of Bool (co_states::Array{Bool}) of exactly the same length as number of polygons that are being returned . co_states[i] is true/false means polygonlist[i] is a closed/open polygon respectively.\n\nAnother minor change from luxors pathtopoly()  is when a CAIROPATHMOVE_TO is encountered , a new poly is started.\n\nReturns Tuple(Array{Point},Array{Bool})\n\n\n\n\n\n","category":"method"},{"location":"references/#Luxor.rotate-Tuple{}","page":"References","title":"Luxor.rotate","text":"rotate()\n\nRotate an Object or a Layer using an Action and an Animation defined with Animations.jl.\n\nIf you're used to working with Animations.jl this should feel quite natural. Instead of defining each movement in its own action it's possible to define it in one by using an Animation.\n\nExample\n\nusing Javis, Animations\n\n# define ground function here\n\nvideo = Video(500, 500)\ntranslate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(150, 0)],\n    [sineio()],\n)\n\ntranslate_back_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(-150, 0)],\n    [sineio()],\n)\n\nrotate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [0, 2π],\n    [linear()],\n)\n\nBackground(1:150, ground)\nball = Object((args...) -> circle(O, 25, :fill))\nact!(ball, Action(1:10, sineio(), scale()))\nact!(ball, Action(11:50, translate_anim, translate()))\nact!(ball, Action(51:100, rotate_anim, rotate_around(Point(-150, 0))))\nact!(ball, Action(101:140, translate_back_anim, translate()))\nact!(ball, Action(141:150, rev(sineio()), scale()))\n\nrender(video)\n\nwhich uses the Action syntax five times with both easing functions directly and animation objects. The rev(sineio()) creates an Animation which goes from 1.0 to 0.0.\n\n\n\n\n\n","category":"method"},{"location":"references/#Luxor.sethue-Tuple{}","page":"References","title":"Luxor.sethue","text":"sethue()\n\nSet the color of an Object using an Action and an Animation defined with Animations.jl.\n\nExample\n\nA possible animation would look like this:\n\ncolor_anim = Animation(\n    [0, 0.5, 1], # must go from 0 to 1\n    [\n        Lab(colorant\"red\"),\n        Lab(colorant\"cyan\"),\n        Lab(colorant\"black\"),\n    ],\n    [sineio(), sineio()],\n)\n\nAn example on how to integrate this into an Action can be seen in rotate. Where this would be a valid Action: Action(1:150, color_anim, sethue()).\n\n\n\n\n\n","category":"method"},{"location":"references/#Luxor.translate-Tuple{}","page":"References","title":"Luxor.translate","text":"translate()\n\nTranslate an Object or a Layer using an Action and an Animation defined with Animations.jl.\n\nIf you're used to working with Animations.jl this should feel quite natural. Instead of defining each movement in its own action it's possible to define it in one by using an Animation.\n\nExample\n\nusing Javis, Animations\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(500, 500)\ncircle_anim = Animation(\n    [0.0, 0.3, 0.6, 1.0], # must go from 0 to 1\n    # the circle will move from the origin to `Point(150, 0)` then `Point(150, 150)`\n    # and back to the origin `O`.\n    [O, Point(150, 0), Point(150, 150), O],\n    [sineio(), polyin(5), expin(8)],\n)\n\nBackground(1:150, ground)\nobj = Object((args...)->circle(O, 25, :fill))\nact!(obj, Action(1:150, circle_anim, translate()))\n\nrender(video)\n\nHere circle_anim defines the movement of the circle. The most important part is that the time in animations has to be from 0.0 to 1.0.\n\nThis notation uses the Animations.jl library very explicitly. It's also possible to do the same with:\n\nobj = Object((args...)->circle(O, 25, :fill))\nact!(obj, Action(1:50, sineio(), anim_translate(150, 0)))\nact!(obj, Action(51:100, polyin(2), anim_translate(0, 150)))\nact!(obj, Action(101:150, expin(8), anim_translate(-150, -150)))\n\nwhich uses the Action syntax three times and only uses easing functions instead of specifying the Animation directly. Have a look at anim_translate for details.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.@Frames-Tuple{Any, Vararg{Any}}","page":"References","title":"Javis.@Frames","text":"@Frames(start, len)\n@Frames(start, stop=)\n\nCan be used to define frames using functions like prev_start or prev_end\n\nExample\n\nred_circ = Object(1:90, (args...)->circ(\"red\"))\nblue_circ = Object(@Frames(prev_start()+20, 70), (args...)->circ(\"blue\"))\nblue_circ = Object(@Frames(prev_start()+20, stop=90), (args...)->circ(\"blue\"))\n\nis the same as\n\nred_circ = Object(1:90, (args...)->circ(\"red\"))\nblue_circ = Object(21:90, (args...)->circ(\"blue\"))\nblue_circ = Object(41:90, (args...)->circ(\"blue\"))\n\n\n\n\n\n","category":"macro"},{"location":"references/#Javis.@JLayer-Tuple{Expr, Int64, Int64, Any, QuoteNode, Expr}","page":"References","title":"Javis.@JLayer","text":"@JLayer(frames, width, height, position, body)\n\nCalls the to_layer_m method to create a Layer out of the arguments given. \n\nArguments\n\nframes:a UnitRange that defines for which frames the layer is active\nwidth: defines the width of the layer\nheight: defines the height of the layer\nposition: location of the center of the layer on the main canvas\ntransparent : Whether the layer should have a transparent background(:transparent or :opaque)\nbody\nIt contains all the objects(and thier respective actions) definitions for a layer\nA layer can have it's own separate background\nAnything defined within the begin...end block stays in the layer\nA Layer has it's own coordinate reference sysstem, i.e. it has it's own origin \nSo eg : Point(100, 100) is different when defined in a layer and doesn't represent   the location 100, 100 on the main canvas \n\nwidth, height, position and transparent are optional and default to the video's width, height, origin and :opaque respectively. Layer declaration should take place before pushing objects to it if one is not using the macro\n\nExample\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction object(p = O, color = \"black\")\n    sethue(color)\n    circle(p, 50, :fill)\nend\n\nvideo = Video(500, 500)\nBackground(1:100, ground)\n\nl1 = @JLayer 10:70 100 100 Point(150, 150) begin\n    red_ball = Object(20:60, (args...)->object(O, \"red\"), Point(50,0))\n    act!(red_ball, Action(anim_rotate_around(2π, O)))\nend\nrender(video; pathname=\"test.gif\")\n\n\n\n\n\n","category":"macro"},{"location":"references/#Javis.@JShape-Tuple{Expr, Vararg{Any}}","page":"References","title":"Javis.@JShape","text":"@JShape(body, args...)\n\nMacro that creates a user-defined shape based on Luxor instructions within its begin...end block\n\nExample\n\nObject(@JShape begin\n    sethue(color)\n    poly(points, action, close = true)\nend action = :stroke color = \"red\" radius = 8)\n\nIn this example, the arguments after the end (i.e. action = :stroke color = \"red\" radius = 8) can be used inside the begin...end block and animated using the change action.\n\n\n\n\n\n","category":"macro"},{"location":"references/#Private-functions","page":"References","title":"Private functions","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Modules = [Javis]\nPublic = false","category":"page"},{"location":"references/#Javis.CURRENT_FETCHPATH_STATE","page":"References","title":"Javis.CURRENT_FETCHPATH_STATE","text":"CURRENT_FETCHPATH_STATE::Bool\n\nIf true all drawing functions convert the current path to a JPath and append them to the CURRENT_JPATHS (does not work on text).  \n\n\n\n\n\n","category":"constant"},{"location":"references/#Javis.CURRENT_JPATHS","page":"References","title":"Javis.CURRENT_JPATHS","text":"An array to accumulate the JPATHs as the obj.func is being executed to get the objects jpaths\n\n\n\n\n\n","category":"constant"},{"location":"references/#Javis.CURRENT_LAYER","page":"References","title":"Javis.CURRENT_LAYER","text":"CURRENT_LAYER\n\nholds the current layer in an array to be declared as a constant The current layer can be accessed using CURRENT_LAYER[1]\n\n\n\n\n\n","category":"constant"},{"location":"references/#Javis.CURRENT_OBJECT","page":"References","title":"Javis.CURRENT_OBJECT","text":"CURRENT_OBJECT\n\nholds the current object in an array to be declared as a constant The current object can be accessed using CURRENT_OBJECT[1]\n\n\n\n\n\n","category":"constant"},{"location":"references/#Javis.CURRENT_VIDEO","page":"References","title":"Javis.CURRENT_VIDEO","text":"CURRENT_VIDEO\n\nholds the current video in an array to be declared as a constant The current video can be accessed using CURRENT_VIDEO[1]\n\n\n\n\n\n","category":"constant"},{"location":"references/#Javis.DISABLE_LUXOR_DRAW","page":"References","title":"Javis.DISABLE_LUXOR_DRAW","text":"DISABLE_LUXOR_DRAW :: Ref{Bool}\n\nIf true disables any drawing to the canvas by luxor , irresepective of what luxor functions are called and what actions are passed to them (:stroke/:fill/:strokepath/:fillpath) . \n\n\n\n\n\n","category":"constant"},{"location":"references/#Javis.PUSH_TO_LAYER","page":"References","title":"Javis.PUSH_TO_LAYER","text":"PUSHTOLAYER\n\nA setinel to aid the creation of layers. If set to true, all the objects are pushed to the current layer. Can be accessed using PUSHTOLAYER[1]\n\n\n\n\n\n","category":"constant"},{"location":"references/#Animations.Animation-Tuple{AbstractVector{<:Real}, AbstractVector{MorphFunction}, AbstractVector{<:Animations.Easing}}","page":"References","title":"Animations.Animation","text":"Animation(timestamps,funcs,easings)\n\nreturns an Animation from an array of MorphFunctions.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.Frames","page":"References","title":"Javis.Frames","text":"Frames\n\nStores the actual computed frames and the user input which can be :same or RFrames(10). The frames are computed in render.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.JPath","page":"References","title":"Javis.JPath","text":"JPath\n\na polygon representation of a path, every Object will have a list of JPaths under the field jpaths. Object JPaths are calculated and updated using getjpaths!, Every call to stroke/fill in the objects obj.func typically adds a JPath to the objects jpaths.  a JPath can be drawn using drawjpath(jpath). Usually if one were to draw out the object.jpath it would result in the exact same picture/drawing as running object.func. JPaths are typically used for morphing and drawing partially.\n\nEvery JPath has the following fields.\n\npolys a list of polygons that makes up the path\nclosed a list of bools of same length as polys. closed[i] \n\nstates if polys[i] is a closed polygon or not\n\nfill a vector of 4 numbers , R, G ,B and A the color it\n\nshould be filled with. if the path was not filled its A is set to 0 (along with R,G,B) this way its an \"invisible\" fill.\n\nstroke a vector of 4 numbers just likefill` for the stroke color.\nlinewidth for stroke \npolylengths , length of every poly in polys , usually computed at rendertime\n\nafter polys are populated\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.Layer","page":"References","title":"Javis.Layer","text":"Layer\n\nDefines a new layer within the video.\n\nFields\n\nframes::Frames: A range of frames for which the Layer exists\nwidth::Int: Width of the layer\nheight::Int: hegiht of the layer\nposition::Point: initial positon of the center of the layer on the main canvas\nlayer_objects::Vector{AbstractObject}: Objects defined under the layer\nactions::Vector{AbstractAction}: a list of actions applied to the entire layer \ncurrent_setting::LayerSetting: The current state of the layer see LayerSetting\nopts::Dict{Symbol,Any}: can hold any options defined by the user\nimage_matrix::Vector: Hold the Drwaing of the layer as a Luxor image matrix\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.LayerCache","page":"References","title":"Javis.LayerCache","text":"LayerCache()\n\nHolds image matrices of layer frames in case show_layer_frame is called.\n\nArguments\n\nframes::UnitRange:The frame range for which layer's frames are to be viewed\nframe_counter::Int: internal counter to keep count of the layer's frame being placed \nlayer_frames::Union{UnitRange,Int}: The frame/frames of the layer to be viewed \nposition::Array{Point}: The position of the layer at each frame that is to be viewed\nsettings_cache::Array{LayerSetting} : Tha layer settings of each frame of the layer to be viewed\nmatrix_cache::Array: a list that holds the image matrices of the layer frames to be viewed \n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.LayerSetting","page":"References","title":"Javis.LayerSetting","text":"LayerSetting\n\nThe current settings of an Layer which are saved in layer.current_setting.\n\nFields\n\nopacity::Float64: the current opacity\ncurrent_scale::Tuple{Float64, Float64}: the current scale\nrotation_angle::Float64: the angle of rotation of a layer.\nmisc::Dict{Symbol, Any}: any other misc metadata\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.ObjectSetting","page":"References","title":"Javis.ObjectSetting","text":"ObjectSetting\n\nThe current settings of an Object which are saved in object.current_setting.\n\nFields\n\nline_width::Float64: the current line width\nmul_line_width::Float64: the current multiplier for line width.   The actual line width is then: mul_line_width * line_width\nopacity::Float64: the current opacity\nmul_opacity::Float64: the current multiplier for opacity.   The actual opacity is then: mul_opacity * opacity\nfontsize::Float64 the current font size\nshow_object::Bool is set to false if scale would be 0.0 which is forbidden by Cairo\ncurrent_scale::Tuple{Float64, Float64}: the current scale\ndesired_scale::Tuple{Float64, Float64}: the new desired scale\nmul_scale::Float64: the multiplier for the new desired scale.   The actual new scale is then: mul_scale * desired_scale\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.ReversedEasing","page":"References","title":"Javis.ReversedEasing","text":"ReversedEasing\n\nWill be used to reverse an easing inside easing_to_animation. Can be constructed from an easing function using rev.\n\n\n\n\n\n","category":"type"},{"location":"references/#Javis.StreamConfig","page":"References","title":"Javis.StreamConfig","text":"StreamConfig\n\nHolds the conguration for livestream, defaults to nothing\n\n#Fields\n\nlivestreamto::Symbol Livestream platform :local or :twitch  \nprotocol::String The streaming protocol to be used. Defaults to UDP\naddress::String The IP address for the :local stream(ignored in case of :twitch)\nport::Int The port for the :local stream(ignored in case of :twitch)\ntwitch_key::String Twitch stream key for your account\n\n\n\n\n\n","category":"type"},{"location":"references/#Animations.linear_interpolate-Tuple{Real, Vector{Javis.JPath}, Vector{Javis.JPath}}","page":"References","title":"Animations.linear_interpolate","text":"Animations.linear_interpolate(\nfraction::Real,\njpaths1::Vector{JPath},\njpaths2::Vector{Jpath}\n)\n\nA method so that Animations.jl can interpolate between Arrays of JPaths.\nNote that the array of jpaths should be of the same size.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._apply_and_reshape-Tuple{Any, Any, Any, Vararg{Any}}","page":"References","title":"Javis._apply_and_reshape","text":"_apply_and_reshape(func, im, template, args...)\n\nApplies function func to imagematrix im. Afterwards reshapes the output  cropping it or padding it to the size of template. All the args are passed to func after im as arguments.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._betweenpoly_noresample","page":"References","title":"Javis._betweenpoly_noresample","text":"_betweenpoly_noresample(loop1,loop2,k; easingfunction = easingflat)\n\nJust like _betweenpoly from Luxor , but expects polygons loop1 and loop2 to be of same size , and therefore does not resample them to be of same size.\n\nFrom Luxor Docs: Find a simple polygon between the two simple polygons loop1 and loop2 corresponding to k,   where 0.0 < k < 1.0.\n\nArguments loop1: first polygon  loop2: second polygon  k: interpolation factor offset: a Tuple , first element is :former or :latter , second element is an Int.         decides if loop1/loop2 is offset and by how much for matching points from loop1 to loop2         note that its not strictly an offset , it ranges from 1->N (no of points) and an offset          of 1 means no offset , offset of 2 means offset by 1 and so on .. TODO change this name         to startidx\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis._convert_and_rescale_if_needed-Tuple{Any, Any}","page":"References","title":"Javis._convert_and_rescale_if_needed","text":"_rescale_if_needed(frame_image, rescale_factor)\n\nConverts frame_image values to RGB and if rescale_factor  in render is different from 1.0 rescales the images matrix for  faster rendering.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._decrement-Tuple{Video, Vector, Vector, Vector, Gtk.GtkCanvas, Int64}","page":"References","title":"Javis._decrement","text":"_decrement(video::Video, widgets::Vector, objects::Vector, dims::Vector,\n    canvas::Gtk.Canvas, frames::Int, layers::Vector)\n\nDecrements a given value and returns the associated frame.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._draw_image-Tuple{Video, Vector, Int64, Gtk.GtkCanvas, Vector}","page":"References","title":"Javis._draw_image","text":"_draw_image(video::Video, objects::Vector, frame::Int, canvas::Gtk.Canvas,\nimg_dims::Vector)\n\nInternal function to create an image that is drawn on a Gtk Canvas.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._drawpartial-Tuple{Any, Any, Any, Any, Real}","page":"References","title":"Javis._drawpartial","text":"_drawpartial(video, action, object, rel_frame, fraction::Real)\n\nInternal function that is used with showcreation showdestruction drawpartial. makes an array of JPaths called partialjpaths that represents a partial drawing of the object. Then it replaces the object.func with drawjpaths(partialjpaths)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._get_range-Tuple{Any, Any}","page":"References","title":"Javis._get_range","text":"_get_range(sizemargin, sizefrom)\n\nFor even sizemargin returns a range with values from sizemargin ÷ 2 + 1 to sizefrom - sizemargin ÷ 2. For odd sizemargin the left range value is increased by one.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._increment-Tuple{Video, Vector, Vector, Vector, Gtk.GtkCanvas, Int64}","page":"References","title":"Javis._increment","text":"_increment(video::Video, widgets::Vector, objects::Vector, dims::Vector,\n    canvas::Gtk.Canvas, frames::Int, layers=Vector)\n\nIncrements a given value and returns the associated frame.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._javis_viewer","page":"References","title":"Javis._javis_viewer","text":" _javis_viewer(video::Video, frames::Int, object_list::Vector, show::Bool)\n\nInternal Javis Viewer built on Gtk that is called for live previewing.\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis._livestream-Tuple{Javis.StreamConfig, Int64, Int64, Int64, String}","page":"References","title":"Javis._livestream","text":"_livestream(streamconfig, framerate, width, height, pathname)\n\nInternal method for livestreaming \n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._morph_jpath-Tuple{Javis.JPath, Javis.JPath, Any, Any}","page":"References","title":"Javis._morph_jpath","text":"_morph_jpath(jpath1::JPath, jpath2::JPath, k)\n\nReturns an interpolated jpath between jpath1 and jpath2 with interpolation factor 0<k<1.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._morph_to","page":"References","title":"Javis._morph_to","text":"_morph_to(video::Video, object::Object, action::Action, frame, to_func::Function, args::Array, samples=100)\n\nInternal version of morph_to but described there.\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis._morph_to-Tuple{Video, Object, Action, Any, Function}","page":"References","title":"Javis._morph_to","text":"_morph_to(video::Video, object::Object, action::Action, frame, to_func::Function; do_action=:stroke)\n\nInternal version of morph_to but described there. older morph.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._morph_to-Tuple{Video, Object, Action, Any, Object, Any}","page":"References","title":"Javis._morph_to","text":"_morph_to( video::Video, object::Object, action::Action, frame, to_obj::Object, samples,)\n\nInternal function used to morph one object to another.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis._postprocess-Tuple{Any, Any, Any}","page":"References","title":"Javis._postprocess","text":"_postprocess(args...;kwargs...)\n\nThis function is used to perform the postprocessing inside the render function. It does mainly two things:\n\nAdds a memoization with checks for the frames to render. The keyword argument \n\nframesmemory, stores those imagematrices associated to frames that will reappear later in the frames processing, so that when those will have to be rendered they can be taken  from here instead, whereas those that do not reappear are discarded. (the check is performed after each frame on those predent in the framesmemory)\n\nApplies postprocess_frame as provided to render on each frame.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.add_points!-Tuple{Any, Any}","page":"References","title":"Javis.add_points!","text":"add_points!(poly, missing_nodes)\n\nAdd #missing_nodes to poly.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.animate_text-Tuple{Any, Point, Symbol, Symbol, Float64, Float64}","page":"References","title":"Javis.animate_text","text":"animate_text(\n    str,\n    pos::Point,\n    valign::Symbol,\n    halign::Symbol,\n    angle::Float64,\n    t::Float64,\n)\n\nThis function is used as a subfunction of text and animates the str by clipping the textoutlines and creating a growing circle in the lower left corner to display the text from left to right in an animated fashion.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.apply_layer_settings-Tuple{Any, Any}","page":"References","title":"Javis.apply_layer_settings","text":"apply_layer_settings(layer_settings, pos)\n\nApplies the computed actions to the image matrix of the layer to it's image matrix Actions supported:\n\nanim_translate:translates the entire layer to a specified position\nsetopacity:changes the opacity of the entire layer\nanim_rotate:rotates the layer by a given angle \nappear(:fade):fades in the layer\ndisappear(:fade):fades out the layer\n\nIt reads and applies the layer settings(computed by get_layer_frame function))\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.apply_transform-Tuple{Vector{Float64}, Vector{Point}}","page":"References","title":"Javis.apply_transform","text":"apply_transform(transform::Vector{Float64} , poly::Vector{Point})\n\napplies the transform , got by getmatrix() on every point in the poly and returns a new poly.\n\nmove this to luxoroverridesutil.jl later.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.centered_point-Tuple{Point, Int64, Int64}","page":"References","title":"Javis.centered_point","text":"centered_point(pos::Point, width::Int, height::Int)\n\nReturns pre-centered points to be used in the place image functions rather than using centered=true  https://github.com/JuliaGraphics/Luxor.jl/issues/155\n\nReturns\n\npt::Point: the location of the center of a layer wrt global canvas\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.compute_frames!-Union{Tuple{Vector{UA}}, Tuple{UA}} where UA<:Union{Javis.AbstractAction, Javis.AbstractObject}","page":"References","title":"Javis.compute_frames!","text":"compute_frames!(elements::Vector{UA}; parent=nothing)\n    where UA<:Union{AbstractObject,AbstractAction}\n\nSet elem.frames.frames to the computed frames for each elem in elements.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.compute_shortest_morphing_dist-Tuple{Vector{Point}, Vector{Point}}","page":"References","title":"Javis.compute_shortest_morphing_dist","text":"compute_shortest_morphing_dist(from_poly::Vector{Point}, to_poly::Vector{Point})\n\nRotates from_poly internally to check which mapping produces the smallest morphing distance. It returns the start index of the rotation of from_poly as well as the smallest distance.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.crop-Tuple{Any, Any, Any}","page":"References","title":"Javis.crop","text":"crop(im, heightto, widthto)\n\nCrops an imagematrix to size (heightto, widthto) around the center of the image.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.default_postprocess-Tuple{Any, Any, Any}","page":"References","title":"Javis.default_postprocess","text":"default_postprocess(frame_image, frame, frames)\n\nReturns its first argument. Used as effectless default for keywords argument postprocess_frame in render function.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:g}, Any, Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:g}, o, defs)\n\nDraws a group by setting the attributes (like transformations) and then calls draw_obj for all child elements.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:path}, Any, Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:path}, o, defs)\n\nCalls the commands specified in the path data. Currently supports only a subset of possible SVG commands.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:rect}, Any, Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:rect}, o, defs)\n\nDraw the rectangle defined by the object o.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_obj-Tuple{Val{:use}, Any, Any}","page":"References","title":"Javis.draw_obj","text":"draw_obj(::Val{:use}, o, defs)\n\nCalls the command specified in defs.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.draw_object-NTuple{5, Any}","page":"References","title":"Javis.draw_object","text":"draw_object(video, layer, frame, origin_matrix, layer_frames)\n\nIs called inside the render and does everything handled for an AbstractObject. It is a 4-step process:\n\ntranslate to the start position\ncall the relevant actions\ncall the object function\nsave the result of the object if wanted inside video.defs\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.drawjpaths-Tuple{Array{Javis.JPath}}","page":"References","title":"Javis.drawjpaths","text":"drawjpaths(jpaths::Array{JPath})\n\ndraws out the jpaths onto the current canvas\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.drawobj_jpaths-Tuple{Object}","page":"References","title":"Javis.drawobj_jpaths","text":"drawobj_jpaths(obj::Object)\n\nDraws JPaths of the object. (not typically used.)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.easing_to_animation-Tuple{Any}","page":"References","title":"Javis.easing_to_animation","text":"easing_to_animation(easing)\n\nConverts an easing to an Animation with time goes from 0.0 to 1.0 and value from 0 to 1.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.easing_to_animation-Tuple{Javis.ReversedEasing}","page":"References","title":"Javis.easing_to_animation","text":"easing_to_animation(rev_easing::ReversedEasing)\n\nConverts an easing to an Animation with time goes from 0.0 to 1.0 and value from 1 to 0.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.empty_CURRENT_constants-Tuple{}","page":"References","title":"Javis.empty_CURRENT_constants","text":"empty_CURRENT_constants()\n\nempty all CURRENT_ constants like CURRENT_OBJECT\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.flatten-Tuple{Vector{Javis.AbstractObject}}","page":"References","title":"Javis.flatten","text":"flatten(layers::Vector{AbstractObject})\n\nTakes out all the objects from each layer and puts them into a single list. This makes things easier for the preprocess_frames! method\n\nReturns\n\nobjects::Vector{AbstractObject} - list of all objects in each layer\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.float_attribute-Tuple{LightXML.XMLElement, Any}","page":"References","title":"Javis.float_attribute","text":"float_attribute(o, name)\n\nGet the attribute name of the XMLElement and parse it as a Float64\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_current_setting-Tuple{}","page":"References","title":"Javis.get_current_setting","text":"get_current_setting()\n\nReturn the current setting of the current object\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_frames-Tuple{Any, Any, Function, UnitRange}","page":"References","title":"Javis.get_frames","text":"function get_frames(parent, elem, func_frames::Function, last_frames::UnitRange; is_first = false)\n\nReturn the frames based on a specified function. The function func_frames is simply evaluated \n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_frames-Tuple{Any, Any, GFrames, UnitRange}","page":"References","title":"Javis.get_frames","text":"get_frames(parent, elem, glob::GFrames, last_frames::UnitRange)\n\nReturn the frames based on a global frames GFrames object and the last_frames. If is_action is false this is the same as defining the frames as just a unit range. Inside an action it's now defined globally though.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_frames-Tuple{Any, Any, RFrames, UnitRange}","page":"References","title":"Javis.get_frames","text":"get_frames(parent, elem, relative::RFrames, last_frames::UnitRange; is_first=false)\n\nReturn the frames based on a relative frames RFrames object and the last_frames.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_frames-Tuple{Any, Any, Symbol, UnitRange}","page":"References","title":"Javis.get_frames","text":"get_frames(parent, elem, frames::Symbol, last_frames::UnitRange; is_first=false)\n\nGet the frames based on a symbol defined in FRAMES_SYMBOL and the last_frames. Throw ArgumentError if symbol is unknown\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_frames-Tuple{Any}","page":"References","title":"Javis.get_frames","text":"get_frames(elem)\n\nReturn elem.frames.frames which holds the computed frames for the AbstractObject or AbstractAction a.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_interpolation-Tuple{Javis.AbstractAction, Any}","page":"References","title":"Javis.get_interpolation","text":"get_interpolation(action::AbstractAction, frame)\n\nReturn the value of the action.anim Animation based on the relative frame given by get_interpolation(get_frames(action), frame)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_interpolation-Tuple{UnitRange, Any}","page":"References","title":"Javis.get_interpolation","text":"get_interpolation(frames::UnitRange, frame)\n\nReturn a value between 0 and 1 which represents the relative frame inside frames.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_javis_frame-Tuple{Any, Any, Any}","page":"References","title":"Javis.get_javis_frame","text":"get_javis_frame(video, objects, frame; layers = Layer[])\n\nIs called inside the render function. It is a 5-step process:\n\nfor each layer fetch it's image matrix and store it into the layer's struct\nif the show_layer_frame method is defined for a layer, save the \n\nposition, image matrix and layer settings for that frame of the layer in a LayerCache\n\nplace the layers on an empty drawing\ncreates the main canvas and renders the independent objects\nplaces the drawing containing all the layers on the main drawing\n\nReturens the final rendered frame\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_layer_frame-Tuple{Any, Any, Any}","page":"References","title":"Javis.get_layer_frame","text":"get_layer_frame(video, layer, frame)\n\nIs called inside get_javis_frame and does two things viz.     - Creates a Luxor Drawing and renders the object of each layer     - computes the actions applies on the layer and stores them\n\nReturns the Drawing of the layer as an image matrix.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.get_offsets-Tuple{Any, Any}","page":"References","title":"Javis.get_offsets","text":"get_offsets(jpath1,jpath2)\n\nreturns an Array of Tuples , each Tuple is of the form (s::Symbol,offsetvalue::Int)\n\nwhile interpolating polys inside the jpath. Javis tries to find a good offsetvalue if poly1 is being morphed into poly2  poly1[i] goes to poly2[i + offsetvalue -1] (modulo length(poly2) addition).\n\ns is either :former or :latter indicating if the offset should be applied on poly1 or poly2\n\nmorphing from closed to closed offsets the former. morphing from closed to open poly offsets the former. morphing from open to closed poly offsets the latter. morphing from open to open poly does no offsetting.\n\noffset of 1 means no offset . It should technically be called best starting indes.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.getjpaths","page":"References","title":"Javis.getjpaths","text":"getjpaths(func::Function, args = [])\n\ngetjpaths runs the function func. func is usually a function with some calls to luxor functions inside to draw something onto a canvas. Although getjpaths does call func it does not draw on the canvas. getjpaths will return an array of JPaths that represent what would be drawn by the func. Also see getjpath!(object,func) \n\n\n\n\n\n","category":"function"},{"location":"references/#Javis.getjpaths!","page":"References","title":"Javis.getjpaths!","text":"getjpaths!(video::Video,obj::Object,frame::Int, func::Function , args=[])\n\nThis is called at rendertime . getjpaths! updates obj.jpaths with jpaths that are generated by drawing func . Typically func is obj.opts[:original_func]\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis.getpartialjpaths-Tuple{Any, Any}","page":"References","title":"Javis.getpartialjpaths","text":"getpartialjpaths(object,fraction)\n\nreturns an array of jpaths , that if drawn will look like partially drawn object partially drawn upto fraction\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.interpolateable-Tuple{AbstractVector}","page":"References","title":"Javis.interpolateable","text":"interpolateable(x::AbstractVector)\n\nReturn the vector in a datatype that is interpolateable.  Currently only implemented is to change from <:Integer to float\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.interpolation_to_transition_val-Tuple{Any, Nothing}","page":"References","title":"Javis.interpolation_to_transition_val","text":"interpolation_to_transition_val(interpolation_val, Transition)\n\nReturns the transition value for the given interpolation_val. If the interpolation value is already of the correct form it just gets returned. Otherwise the Transition function like get_position is called and the interpolated value is calculated.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.jpath_polylengths!-Tuple{Javis.JPath}","page":"References","title":"Javis.jpath_polylengths!","text":"jpath_polylengths!(jpath::JPath)\n\nupdates the polylengths field in jpath with the lengths of the polys\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.len_jpath-Tuple{Javis.JPath}","page":"References","title":"Javis.len_jpath","text":"len_jpath(jpath::JPaht)\n\nreturns the sum of all the lengths of the polys that this jpath contains\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.match_num_points-Tuple{Vector{Point}, Vector{Point}}","page":"References","title":"Javis.match_num_points","text":"match_num_points(poly_1::Vector{Point}, poly_2::Vector{Point})\n\nThis is a helper function for morph_to. Given two polygons poly_1 and poly_2 points are added to the polygon with less points until both polygons have the same number of points. The polygon with less points gets mutated during this process.\n\nArguments\n\npoly_1::Vector{Point}: The points which define the first polygon\npoly_2::Vector{Point}: The points which define the second polygon\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.morph_between-Tuple{Video, Action, Any, Vector{Vector{Point}}, Vector{Vector{Point}}}","page":"References","title":"Javis.morph_between","text":"morph_between(video::Video, action::Action, frame,\n    from_polys::Vector{Vector{Point}}, to_polys::Vector{Vector{Point}};\n    do_action=:stroke)\n\nInternal version of morph_to after the from poly is defined.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.null_jpath","page":"References","title":"Javis.null_jpath","text":"a very small jpath to appear from/disappear into has 1 poly of samples points in the shape of an ngon  black fill 0 alpha, black stroke opaque linewidth 2\n\n\n\n\n\n","category":"function"},{"location":"references/#Javis.path_move-Tuple{Any, Any}","page":"References","title":"Javis.path_move","text":"path_move(x,y)\n\nMoving to the specified point\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.path_quadratic-Tuple{Point, Vararg{Any, 4}}","page":"References","title":"Javis.path_quadratic","text":"path_quadratic(c_pt::Point, x,y, xe, ye)\n\nDrawing a quadratic bezier curve by computing a cubic one as that is supported by Luxor\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.pathsvg-Tuple{Any}","page":"References","title":"Javis.pathsvg","text":"pathsvg(svg)\n\nConvert an svg to a path using Luxor. Normally called via the latex command. It handles only a subset of the full power of svg.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.place_layers-Tuple{Any, Any, Any}","page":"References","title":"Javis.place_layers","text":"place_layers(video, layers, frame)\n\nPlaces the layers on an empty drawing It does 4 things:\n\ncreates an empty Drawing of the same size as video\ncalls the apply_layer_settings\nplaces every layer's image matrix on the drawing\nRepeats the above two steps if the show_layer_frame is defined for that layer(and frame)   But fetches image matrix, position and settings from the layer cache\n\nReturns the Drawing containing all the layers as an image matrix.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.polymorph_noresample-Tuple{Array{Vector{Point}}, Array{Vector{Point}}, Any, Array{Tuple{Symbol, Int64}}}","page":"References","title":"Javis.polymorph_noresample","text":"    polymorph_noresample(\n        pgon1::Array{Array{Point,1}},\n        pgon2::Array{Array{Point,1}},\n        k;\n        offsets::Array{Tuple{Symbol,Int}};\n        easingfunction = easingflat,\n        kludge = true,\n    )\n\nlike luxors polymorph , but does not resample the polygon , therefore every polygon in pgon1 and pgon2 should have the same number of points. used by _morph_jpath.\n\nAlso takes in an additional argument an array of offset . Check _between_poly for more detail on offset\n\nFrom Luxor Docs:\n\n\"morph\" is to gradually change from one thing to another. This function changes one polygon   into another.\n\nIt returns an array of polygons, [p1, p2, p3, ... ], where each polygon pn is the   intermediate shape between the corresponding shape in pgon1[1...n] and pgon2[1...n] at k,   where 0.0 < k < 1.0. If k ≈ 0.0, the pgon1[1...n] is returned, and if `k ≈ 1.0,   pgon2[1...n] is returned.\n\npgon1 and pgon2 can be either simple polygons or arrays of one or more polygonal shapes (eg   as created by pathtopoly()). For example, pgon1 might consist of two polygonal shapes, a   square and a triangular shaped hole inside; pgon2 might be a triangular shape with a square   hole.\n\nIt makes sense for both arguments to have the same number of polygonal shapes. If one has   more than another, some shapes would be lost when it morphs. But the suggestively-named   kludge keyword argument, when set to (the default) true, tries to compensate for this.\n\nBy default, easingfunction = easingflat, so the intermediate steps are linear. If you use   another easing function, intermediate steps are determined by the value of the easing   function at k.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.preprocess_frames!-Tuple{Vector{<:Javis.AbstractObject}}","page":"References","title":"Javis.preprocess_frames!","text":"preprocess_frames!(objects::Vector{<:AbstractObject})\n\nComputes the frames for each object(of both the main canvas and layers) and action based on the user defined frames that the user can provide like RFrames, GFrames and :same.\n\nThis function needs to be called before calling get_javis_frame as it computes the actual frames for objects and actions.\n\nReturns\n\nframes::Array{Int} - list of all frames normally 1:...\n\nWarning\n\nShows a warning if some frames don't have a background.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.preprocess_frames!-Tuple{Video}","page":"References","title":"Javis.preprocess_frames!","text":"preprocess_frames!(video::Video)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.remove_from_video-Tuple{Object}","page":"References","title":"Javis.remove_from_video","text":"remove_from_video(object::Object)\n\nRemoves an object or a list of objects from the main video. This is a helper method for the to_layer! method and is supposed to be used internally\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.render_objects-Tuple{Any, Any, Any}","page":"References","title":"Javis.render_objects","text":"render_objects(objects, video, frame; layer_frames=nothing)\n\nIs called inside the get_javis_frame function and renders objects(both individual and ones belonging to a layer).\n\nArguments\n\nobject::Object: The object to be rendered\nvideo::Video: The video which defines the dimensions of the output\nframe::Int: The frame number to be rendered\nlayer_frames::UnitRange: The frames of the layer to which the object belongs(nothing for independent objects)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.reorder_match-Tuple{Vector{Javis.Shape}, Vector{Javis.Shape}}","page":"References","title":"Javis.reorder_match","text":"reorder_match(from_shapes::Vector{Shape}, to_shapes::Vector{Shape})\n\nComputes the similiarty of the shapes and finds the best mapping such that the sum of similiarty is maximized.\n\nAdditionally it creates empty shapes when needed such that reordered_from and reordered_to contain the same number of shapes.\n\nReturns\n\nreordered_from::Vector{Shape}\nreordered_to::Vector{Shape}\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.save_morph_polygons!-Tuple{Action, Vector{Vector{Point}}, Vector{Vector{Point}}}","page":"References","title":"Javis.save_morph_polygons!","text":"save_morph_polygons!(action::Action, from_func::Vector{Vector{Point}},\n                                     to_func::Vector{Vector{Point}})\n\nCalls the functions to polygons and calls match_num_points such that both polygons have the same number of points. This is done once inside _morph_to. Saves the two polygons inside action.defs[:from_poly] and action.defs[:to_poly].\n\nAssumption: Both functions create the same number of polygons.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_attr-Tuple{Val{:transform}, Any}","page":"References","title":"Javis.set_attr","text":"set_attr(::Val{:transform}, transform_strs)\n\nCall the corresponding set_transform method i.e matrix, scale and translate\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_attrs-Tuple{Any}","page":"References","title":"Javis.set_attrs","text":"set_attrs(o)\n\nSetting the attributes of the object o by calling set_attr methods.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_current_action-Tuple{Action}","page":"References","title":"Javis.set_current_action","text":"set_current_action(action::Action)\n\nSet the action as CURRENT_ACTION and update PREVIOUS_OBJECT/PREVIOUS_ACTION\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_current_action_type-Tuple{Any}","page":"References","title":"Javis.set_current_action_type","text":"set_current_action_type(t)\n\nSet CURRENT_OBJECT_ACTION_TYPE to :Object or :Action depending  on the type of t.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_current_object-Tuple{Object}","page":"References","title":"Javis.set_current_object","text":"set_current_object(object::Object)\n\nSet the object as CURRENT_OBJECT and update PREVIOUS_OBJECT/PREVIOUS_ACTION\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_frames!-Tuple{Any, Any, UnitRange}","page":"References","title":"Javis.set_frames!","text":"set_frames!(parent, elem, last_frames::UnitRange; is_first=false)\n\nCompute the frames based on a.frames and last_frames. Save the result in a.frames.frames which can be accessed via get_frames.\n\nArguments\n\nparent is either nothing or the Object for the Action\nelem is the Object or Action\nlast_frames holds the frames of the previous object or action.\nis_first defines whether this is the first child of the parent (for actions)\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_object_defaults!-Tuple{Any}","page":"References","title":"Javis.set_object_defaults!","text":"set_object_defaults!(object)\n\nSet the default object values\n\nline_width and calls Luxor.setline.\nopacity and calls Luxor.opacity.\nscale and calls Luxor.scale.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_previous_action-Tuple{Action}","page":"References","title":"Javis.set_previous_action","text":"set_previous_action(action::Action)\n\nSet the action as PREVIOUS_ACTION\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_previous_object-Tuple{Object}","page":"References","title":"Javis.set_previous_object","text":"set_previous_object(object::Object)\n\nSet the object as PREVIOUS_OBJECT\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.set_transform-Tuple{Val{:matrix}, Vararg{Any}}","page":"References","title":"Javis.set_transform","text":"set_transform(::Val{:matrix}, args...)\n\nMultiply the new matrix with the current matrix and set it.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.show_layer_frame-Tuple{UnitRange, Union{Int64, UnitRange}, Javis.Layer}","page":"References","title":"Javis.show_layer_frame","text":"show_layer_frame(frames::UnitRange, layer_frame::Union{UnitRange,Int}, layer::Layer)\n\nRepeat a layer's frame/frames for a given frame range.\n\nArguments\n\nframes::UnitRange: The frame range for which the layer should be repeated\nlayer_frame::Union{UnitRange,Int}: The layer frame range to repeat\nlayer::Layer:the layer to be repeated\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.strip_eq-Tuple{LaTeXStrings.LaTeXString}","page":"References","title":"Javis.strip_eq","text":"strip_eq(text::LaTeXString)\n\nStrips $$ from text.s if present and returns the resulting string. \n\nArguments\n\ntext::LaTeXString: a LaTeX string\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.svgwh-Tuple{Any}","page":"References","title":"Javis.svgwh","text":"svgwh(svg)\n\nReturn the width and height of svg displayed scaled to half the font size. \n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.to_layer!-Tuple{Javis.Layer, Object}","page":"References","title":"Javis.to_layer!","text":"to_layer!(l::Layer, object::Object)\n\nPushes an object into the layer and out of the list of independent objects. This method is helpful in case one doesn't want to include an object in the  begin...end block of @JLayer.    \n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.to_layer!-Tuple{Javis.Layer, Vector{Object}}","page":"References","title":"Javis.to_layer!","text":"to_layer!(l::Layer, objects::Vector{Object})\n\nPushes a list of objects into the layer, This method is helpful in case one doesn't want to include an object in the  begin...end block of @JLayer.    \n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.to_layer_m-Tuple{Any, Any}","page":"References","title":"Javis.to_layer_m","text":"to_layer_m( frames, body; width, height, position)\n\nHelper method for the @JLayer macro Returns an expression that creates a layer and pushes the objects defined withing the body to the layer :transparent is the default while the other :opaque copies the video's background\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.try_merge_polygons-Tuple{Any}","page":"References","title":"Javis.try_merge_polygons","text":"try_merge_polygons(polys)\n\nTry to merge polygons together to match the number of polygons that get morphed. The only example I encountered is that the [ of a 3xY matrix consists of 3 parts which are merged together.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.update_ObjectSetting!-Tuple{Javis.ObjectSetting, Javis.ObjectSetting}","page":"References","title":"Javis.update_ObjectSetting!","text":"update_ObjectSetting!(as::ObjectSetting, by::ObjectSetting)\n\nSet the fields of as to the same as by. Basically copying them over.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.update_currentjpath-Tuple{Symbol}","page":"References","title":"Javis.update_currentjpath","text":"update_currentjpath(action::Symbol)\n\nUpdates the CURRENTJPATHS This function is used  inside the strokepath/strokepreserve/fillpath/fillpreserve. Converts the current Path and other drawing states into a JPath and appends to the CURRENTJPATHS global.\n\nthe argument is a symbol either :stroke or :fill , to change behaviour for stroke vs fill.\n\n\n\n\n\n","category":"method"},{"location":"references/#Javis.update_previous_object_or_action-Tuple{}","page":"References","title":"Javis.update_previous_object_or_action","text":"update_previous_object_or_action()\n\nUpdate the PREVIOUS_OBJECT or PREVIOUS_ACTION depending on whether the  last element was an object or an action. This is still saved in CURRENT_OBJECT_ACTION_TYPE.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/#**Information-about-Tutorials-Beginners-Start-Here!**","page":"Information about Tutorials - Beginners Start Here!","title":"Information about Tutorials - Beginners Start Here!","text":"","category":"section"},{"location":"tutorials/#Why-Tutorials?","page":"Information about Tutorials - Beginners Start Here!","title":"Why Tutorials?","text":"","category":"section"},{"location":"tutorials/","page":"Information about Tutorials - Beginners Start Here!","title":"Information about Tutorials - Beginners Start Here!","text":"These tutorials are provided to assist in your adventures in Javis.jl! Each one was made with care, quality, and a good sense of humor to facilitate a fun and educational experience. If you want to make a tutorial, we encourage you to read some of these tutorials to get a feel for how they are structured and written. After that, check out our contributing guidelines and open up an issue about what tutorial you want to add!","category":"page"},{"location":"tutorials/#List-of-Available-Tutorials","page":"Information about Tutorials - Beginners Start Here!","title":"List of Available Tutorials 📚","text":"","category":"section"},{"location":"tutorials/","page":"Information about Tutorials - Beginners Start Here!","title":"Information about Tutorials - Beginners Start Here!","text":"Here is a current list of our tutorials. Their level of difficulty starts from a beginner Javis user to advanced usages of Javis. Currently, these tutorials are available:","category":"page"},{"location":"tutorials/","page":"Information about Tutorials - Beginners Start Here!","title":"Information about Tutorials - Beginners Start Here!","text":"Tutorial 1: Making Your First Javis Animation! - a step by step guide to making your first animation with Javis.\nTutorial 2: Using Shorthands in Javis! - Using shorthands in Javis.\nTutorial 3: What Are Actions? - an introduction to the most important part of Javis - the Action object.\nTutorial 4: Rendering LaTeX with Javis! - a simple tutorial on how to render LaTeX in Javis animations.\nTutorial 5: Do You Know Our Mascot? Learn about Transitions and Actions! - a fun tutorial to make our mascot and learn about the Action and Transition type methods.\nTutorial 6: Taming the Elements - how to use change to grow or shrink arbitrary objects and using Javis with other Julia packages.\nTutorial 7: Using Animations.jl to Create something with more Pep! - an advanced tutorial to make your animations more interesting.\nTutorial 8: Fun with Layers! An Intro to @JLayer - a Javis state of the art tutorial on how to use @JLayer to make composable animations.\nTutorial 9: Morphing - Morphing Javis Objects.\n**Tutorial 10: Animate Object Creation ** - Animate Object Creations. ","category":"page"},{"location":"tutorials/","page":"Information about Tutorials - Beginners Start Here!","title":"Information about Tutorials - Beginners Start Here!","text":"If you spot an issue with any of these tutorials, please let us know! Thank you!","category":"page"},{"location":"contributing/#Contributing-to-Javis","page":"Contributing","title":"Contributing to Javis","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Javis is currently under heavy development as we push to a primary release version. As such, some parts of these instructions may become outdated faster than we can update them. If you encounter an error in these instructions, please open an issue and let us know. ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We follow a workflow pattern that is directly inspired by the development workflow guide found in Plots.jl. The general workflow we expect contributors to adhere to is as follows:","category":"page"},{"location":"contributing/#.-Create-an-Issue-about-the-Problem","page":"Contributing","title":"1. Create an Issue about the Problem","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you want to add functionality or to work on a bug you found, open an issue first. That'll save you from doing work that we may not support for Javis.","category":"page"},{"location":"contributing/#.-Fork-the-repo-to-your-account","page":"Contributing","title":"2. Fork the repo to your account","text":"","category":"section"},{"location":"contributing/#.-Create-a-branch-based-on-what-you-are-developing","page":"Contributing","title":"3. Create a branch based on what you are developing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Before making a branch, make sure to check that you are even with main via the following commands:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"git fetch origin\ngit checkout main\ngit merge --ff-only origin/main","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The --ff-only flag will \"fast forward\" to newer commits. It will not create new merge commits.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"After your main branch is up to date, we follow the following naming conventions for branches:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For issue fixes, name it like so:\ngit branch [your github username]-issue-[issue number]\n\nExample: tcp-issue-6\nFor features, name it like so:\ngit branch [your github username]-feature-[name of feature]\n\nExample: tcp-feature-scaling\nFor documentation, name it like so:\ngit branch [your github username]-documentation-[where improvement is made]\n\nExample: tcp-documentation-contributing-guidelines","category":"page"},{"location":"contributing/#.-Test,-code,-format,-and-commit","page":"Contributing","title":"4. Test, code, format, and commit","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Once you have a fork, it is useful to make sure the fork was successful. To verify that everything is operational, let's test it. The following procedure is as follows:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Go into the root of your fork:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"cd Javis","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Open your Julia REPL and type the following within the repo:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(@v###) pkg> dev .\n(@v###) pkg> test Javis","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"This might take some time, but if the installation on your computer is successful, it should say all tests passed.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"NOTE: You may need to remove the current version of Javis you have installed in your Julia environment in order to develop. ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"After making the changes you wanted to make, run the tests again to make sure you did not introduce any breaking changes. If everything passed, we can continue on to the next step. If not, it is the responsibility of the contributor to resolve any conflicts or failing tests. Don't worry! We're happy to help you resolve errors. 😄 If you are stuck, go ahead and continue with this tutorial.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Once you are done with your changes, you will need to install JuliaFormatter.jl to format your code before we make a PR. To do this, install JuliaFormatter.jl into your personal Julia installation by running:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(@v###) pkg> add JuliaFormatter","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"NOTE: Make sure that (@v###) pkg> does not say (Javis) pkg> or else you will accidentally install JuliaFormatter.jl into Javis.jl! To get out of the (Javis) pkg> environment, type into your REPL, julia> ] activate and that should put you back into your own environment.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Great! Now that you have JuliaFormatter.jl installed, run the following in your REPL:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> using JuliaFormatter\njulia> format(\".\")","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"NOTE: Make sure when you run format, you are at the top of the Javis directory so that every file gets properly formatted.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Now that formatting is done, let's push your changes to GitHub! The way we do this is in three steps:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Add the files you have added or changed via git add \nAfter adding the files, we need to say what you did to the files (i.e. commit the files). This can be accomplished thusly: git commit -m \"your message\" \nFinally, let's push these changes to GitHub using git push --set-upstream origin [name of the branch you made]","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"An example would be this: Say if I make a branch called tcp-documentation-22 after a discussion about changing documentation in issue 22.  From that file, I changed README.md to add about how cool I think penguins are. I would do the following:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"git add README.md\ngit commit -m \"Added discussion about penguins\"\ngit push --set-upstream origin tcp-documentation-22","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If I have already pushed in the past and set the upstream to origin, then I could do git push instead of git push --set-upstream origin tcp-documentation-22.","category":"page"},{"location":"contributing/#.-Submitting-your-changes-to-the-main-project","page":"Contributing","title":"5. Submitting your changes to the main project","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Almost done! Go to your fork and there should be a section that asks you to make a pull request (PR) from your branch. This allows the maintainers of Javis to see if they can add your changes to the main project. If not, you can click the \"New pull request\" button.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Make sure the \"base\" branch is Javis main and the \"compare\" branch is the branch you just made.  To your PR, add an informative title and description, and link your PR to relevant issues or discussions.  Finally, click \"Create pull request\". ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"You may get some questions about it, and possibly suggestions of how to make it ready to go into the main project.  If you had test errors or problems, we are happy to help you.  Then, if all goes according to plan, it gets merged... Thanks for the contribution!! 🎉 🎉 🎉","category":"page"},{"location":"contributing/#Note-on-Adding-Dependencies","page":"Contributing","title":"Note on Adding Dependencies","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"As a rule, we try to avoid having too many dependencies. Therefore, we request that if you have a PR that adds a new dependency, please have opened an issue previously.","category":"page"},{"location":"contributing/#Adding-Core-Dependencies","page":"Contributing","title":"Adding Core Dependencies","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you are working on introducing a new core dependency, make sure to add that dependency to the main Project.toml for Javis. To do this, follow these steps:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Enter the root of the Javis directory ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"cd /path/to/Javis.jl","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Activate the Javis environment and add the dependency:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(@v###) pkg> activate .\n(Javis) pkg> add [NAME OF DEPENDENCY]","category":"page"},{"location":"contributing/#Adding-Test-Dependencies","page":"Contributing","title":"Adding Test Dependencies","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you are  introducing a new test dependency, make sure to add that dependency to the Project.toml located in the Javis test directory. To do this, follow these steps:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Enter the test directory inside of the Javis directory ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"cd /path/to/Javis.jl/test/","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Activate the Javis environment and add the dependency:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(@v###) pkg> activate .\n(test) pkg> add [NAME OF DEPENDENCY]","category":"page"},{"location":"howto/#How-To?","page":"HowTo","title":"How To?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"This is a list of frequently ask questions answering basic \"How to do X, Y, Z?\" questions.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"For all the questions below you need to start with:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"using Javis\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(500, 500)\nBackground(1:100, ground)\n# The provided snippets!\n\nrender(video; pathname=\"how_to.gif\")","category":"page"},{"location":"howto/#Why-are-all-my-Javis-functions-undefined?","page":"HowTo","title":"Why are all my Javis functions undefined?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"If you have worked with the Julia drawing package Luxor.jl, you will be happy to see that it provides all the drawing functions that Javis uses. Javis is basically an abstraction layer built on on top of Luxor.jl which provides functions to animate the static images you can create with Luxor more easily. As one can't use Javis without using Luxor we decided to reexport all functions that Luxor exports.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"This means you should not call using Luxor in scripts that use Javis. Otherwise it will result in ambiguity errors such as all the Javis functions becoming undefined when you try to run a Julia script with Javis in it or other strange conflicts. Another reason we reexport all functions from Luxor is that we sometimes need to add additional Javis functionality around certain Luxor functions to create better animations.","category":"page"},{"location":"howto/#How-can-I-move-a-circle-from-A-to-B?","page":"HowTo","title":"How can I move a circle from A to B?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"First of all you need to define an Object which draws a circle.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"circ = Object(1:100, (args...)->circle(O, 50, :fill))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"and then you need the a translation with anim_translate to move the circle.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"act!(circ, Action(anim_translate(O, Point(100, 100))))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"The circle then moves from the origin (center of frame) 100 px down and to the right.","category":"page"},{"location":"howto/#How-can-I-define-frames?","page":"HowTo","title":"How can I define frames?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"There are currently three different ways to define frames inside Javis. The simplest one is to define the UnitRange like 1:100 as above such that the action is called for every frame from 1 to 100.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Examples:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Object(1:100, (args...)->circle(O, 50, :fill))\nObject(1:50, (args...)->circle(O, 70, :stroke))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"It is relatively often the case that the following action should work with the same frames as the previous action this can be done with.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Examples:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Object(1:100, (args...)->circle(O, 50, :fill))\nObject(:same, (args...)->circle(O, 20, :stroke), Point(100, 100))\nObject((args...)->circle(O, 20, :stroke), Point(-100, 100))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"so either use the symbol :same or just don't mention frames.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"The last option is to define frames relative to the previous frame. More precisely the end of the last frame.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Examples:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Object(1:50, (args...)->circle(O, 50, :fill))\nObject(RFrames(1:50), (args...)->circle(O, 20, :stroke), Point(100, 100))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"This is the same as:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Object(1:50, (args...)->circle(O, 50, :fill))\nObject(51:100, (args...)->circle(O, 20, :stroke), Point(100, 100))","category":"page"},{"location":"howto/#How-can-I-make-an-object-fade-in-from-the-background?","page":"HowTo","title":"How can I make an object fade in from the background?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Let's make the standard circle we used before appear from the background.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"circ = Object(1:100, (args...)->circle(O, 50, :fill))\nact!(circ, Action(1:50, appear(:fade)))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"this is using a change in opacity to show the circle.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"There are two other options :scale and :fade_line_width. :scale also works for every kind of Object whereas :fade_line_width only works if you only draw the stroke instead of using fill.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Example:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"circ = Object(1:100, (args...)->circle(O, 50, :stroke))\nact!(circ, Action(1:50, appear(:fade_line_width)))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Additionally you can use all of these three options for the disappear functionality.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"NOTE: An Action gets also called for frames after the last specified action frame such that disappeared objects stay disappeared. This can be turned off by using ; keep = false as an argument to the Action.","category":"page"},{"location":"howto/#How-can-I-move-one-object-based-on-another-object?","page":"HowTo","title":"How can I move one object based on another object?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"In this case we need to define our own circ function which draws the circle and returns the center point of the circle.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"function circ(point, radius, action)\n    circle(point, radius, action)\n    return point\nend","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Now we define two actions:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Drawing a circle and saving the position my_circle\nDrawing a rectangle above the circle","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"my_circle = Object(1:100, (args...)->circ(O, 50, :stroke))\nact!(my_circle, Action(anim_translate(100, 100)))\nObject(1:100, (args...)->rect(pos(my_circle)+Point(-10, -100), 20, 20, :fill))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"In this animation the position of the circle is saved inside my_circle and can be used with pos(my_circle) inside the rect function.","category":"page"},{"location":"howto/#How-can-I-show-a-text-being-drawn?","page":"HowTo","title":"How can I show a text being drawn?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"A text or latex rendering can appear as any other object with appear(:fade) and appear(:scale), However, it also has a special appear functionality called  :draw_text.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"You can use ","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"my_text = Object(1:100, (args...) -> text(\"Hello World!\"; halign = :center))\nact!(my_text, Action(1:15, sineio(), appear(:draw_text)))\nact!(my_text, Action(76:100, sineio(), disappear(:draw_text)))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"to let the text \"Hello World!\" appear from left to right in an animated way. ","category":"page"},{"location":"howto/#How-can-I-have-an-object-follow-a-path?","page":"HowTo","title":"How can I have an object follow a path?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"We need to create a path by providing a list of points that the object can follow. All objects that return a list of points can be used directly like star and poly for others a list of points must be provided as the input.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"An action can look like this:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"my_star = Object(1:100, (args...) -> star(O, 20, 5, 0.5, 0, :fill))\nact!(my_star, Action(1:100, follow_path(star(O, 200))))","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"in this case a star is following the path of a bigger star. ","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"NOTE: the star inside follow_path should have the action=:none which is the default for most Luxor functions.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"NOTE: Unfortunately the above currently only works for some Luxor functions like ngon and star but not for circle and rect as they return true instead of the points.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"In that case you need to define a function like:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"function ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction luxor2poly(func::Function)\n    newpath()\n    func()\n    closepath()\n    return pathtopoly()[1]\nend\n\nvideo = Video(600, 400)\nBackground(1:100, ground)\nmy_star = Object(1:100, (args...) -> star(O, 20, 5, 0.5, 0, :fill))\nact!(my_star, Action(1:100, follow_path(luxor2poly(()->rect(O, 100, 100, :path)))))\nrender(video; pathname=\"follow_path.gif\")","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Another possibility is to specify a vector of points like this:","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"act!(\n    my_star,\n    Action(\n        1:100,\n        sineio(),\n        follow_path([Point(100, 100), Point(-20, -150), Point(-80, -10)]; closed = false),\n    ),\n)","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"In this case I want the star to follow a path consisting of two edges and I use ; closed=false to specify that it's just two edges and not a closed triangle.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"An interesting possibility is to define paths using Bézier curves which can be defined with Luxor (see: Polygons to Bézier paths and back again)","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"One example of this can be seen in our example section","category":"page"},{"location":"howto/#How-can-I-see-a-live-view-of-the-animation?","page":"HowTo","title":"How can I see a live view of the animation?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"A live view of the animation can be useful for creating an animation where one doesn't need the overhead of building a gif or mp4 all the time. It also has the advantage that it's very easy to jump to a specific frame.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"The live viewer can be called with adding ; liveview=true to the render call.","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"NOTE: If liveview=true the tempdirectory and pathname arguments are ignored and no file is created.","category":"page"},{"location":"howto/#How-Can-I-Speed-Up-Rendering?","page":"HowTo","title":"How Can I Speed Up Rendering?","text":"","category":"section"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"For longer videos, it can happen that rendering takes some time. A long time. One way to reduce rendering time is that you can render a scaled version of the animation to check if everything is animated as expected. ","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"By using render(video; pathname=\"how_to.gif\", rescale_factor=0.5), the rendering process can be sped up generally a factor of 2. This scales the frames of an animation down to half where a Video(1000, 1000) will be shown as a Video(500, 500) rendered video. ","category":"page"},{"location":"howto/","page":"HowTo","title":"HowTo","text":"Note: You might want to experiment with rendering to mp4 instead of gif as well.","category":"page"},{"location":"tutorials/tutorial_6/#**Tutorial-6:**-Taming-the-Elements","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"","category":"section"},{"location":"tutorials/tutorial_6/#Introduction","page":"Tutorial 6: Taming the Elements","title":"Introduction","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"The world is built up of tiny tiny building blocks known as atoms. ⚛️ These atoms come in many different sizes and each has different properties. Let's visualize these atoms and show their uniqueness!","category":"page"},{"location":"tutorials/tutorial_6/#Learning-Outcomes","page":"Tutorial 6: Taming the Elements","title":"Learning Outcomes 📚","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"In this tutorial you'll learn:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"How to use change to change a variable inside of an animation.\nTo use Javis.jl to interact with the following Julia packages:\nUnitful.jl\nPeriodicTable.jl\nWays of creating educational gifs","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"By the end of this tutorial, you will have made the following animation:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_6/#PeriodicTable.jl-and-Unitful.jl","page":"Tutorial 6: Taming the Elements","title":"PeriodicTable.jl and Unitful.jl","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"As normal with our tutorials, we need to import first the packages we will be using. In this tutorial, we are introducing two new packages:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"PeriodicTable.jl - Periodic table render in Julia\nUnitful.jl - Physical quantities with arbitrary units","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"These are straightforward to add to your Julia installation by executing the following in your Julia REPL:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"julia> ] add Unitful, PeriodicTable","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"You might be wondering what these packages do. Let's dive into them then!","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"PeriodicTable.jl enables one to look at information quickly related to the periodic table of elements. One can even print out such a table in their Julia REPL by doing the following:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"julia> using PeriodicTable\n\njulia> elements\n Elements(…119 elements…):\nH                                                  He\nLi Be                               B  C  N  O  F  Ne\nNa Mg                               Al Si P  S  Cl Ar\nK  Ca Sc Ti V  Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Kr\nRb Sr Y  Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I  Xe\nCs Ba    Hf Ta W  Re Os Ir Pt Au Hg Tl Pb Bi Po At Rn\nFr Ra    Rf Db Sg Bh Hs Mt Ds Rg Cn Nh Fl Mc Lv Ts Og\nUue\n      La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm Yb Lu\n      Ac Th Pa U  Np Pu Am Cm Bk Cf Es Fm Md No Lr","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"As the famous Mythbuster, Adam Savage once said, \"IT'S SCIENTIFIC!\" 🧪 🤓 One can even query PeriodicTable to find out information on specific elements. Let's look up Oxygen (O) here!","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"julia> elements[8]\n Oxygen (O), number 8:\n        category: diatomic nonmetal\n     atomic mass: 15.999 u\n         density: 1.429 g/cm³\n   melting point: 54.36 K\n   boiling point: 90.188 K\n           phase: Gas\n          shells: [2, 6]\ne⁻-configuration: 1s² 2s² 2p⁴\n         summary: Oxygen is a chemical element with symbol O and atomic number 8. It is a member of the chalcogen group on the periodic table and is a highly reactive nonmetal and oxidizing agent that readily forms compounds (notably oxides) with most elements. By mass, oxygen is the third-most abundant element in the universe, after hydrogen and helium.\n   discovered by: Carl Wilhelm Scheele\n        named by: Antoine Lavoisier\n          source: https://en.wikipedia.org/wiki/Oxygen\n  spectral image: https://en.wikipedia.org/wiki/File:Oxygen_spectre.jpg","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"As fellow Julian, Johann-Tobias Schäg, said, one should learn Unitful.jl if they want to interact with the real world. Unitful.jl handles physical quantities such as pounds, meters, mols, etc. with minimal overhead in Julia. Further, it helps one to keep track of units and easily convert between different measurement systems.","category":"page"},{"location":"tutorials/tutorial_6/#Setting-Up-Our-Animation","page":"Tutorial 6: Taming the Elements","title":"Setting Up Our Animation","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"As always, let's import our needed packages:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"using Animations\nusing Javis\nusing PeriodicTable\nusing Unitful","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"NOTE: For this tutorial, we will also use Animations.jl to provide what are called \"easing functions\".","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"These are used to control the speed at which an animation is drawn. This is further explained in Tutorial 7 so for now, don't worry too much about what we are doing with it. ","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"And let's define our background function. This background function will also write the current frame being drawn:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"function ground(video, action, frame)\n    background(\"white\")\n    sethue(\"black\")\nend","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Finally, let's get started with creating our render function:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"demo = Video(500, 500)\nBackground(1:550, ground)\nrender(demo, pathname=\"tutorial5.gif\", framerate = 10)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"As you can see, the animation we are creating is going to have many frames! This is the longest animation we have made so far. Why? Not only are we going to examine many different elements, this tutorial also serves to illustrate how one can make longer animations to convey ideas. Think of it as your directoral debut! 🎬 🎥","category":"page"},{"location":"tutorials/tutorial_6/#Taming-the-Elements!","page":"Tutorial 6: Taming the Elements","title":"Taming the Elements!","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Each element has a different atomic mass. This atomic mass is measured in the unit called a \"Dalton\" (symbol: u) which is equivalent to 1/12 of the mass of a stationary carbon-12 atom. We can use the change functionality that Javis.jl provides to visualize different elements!","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"To accomplish this, we need to make a function that shows our currently viewed element:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"function element(; radius = 1, color = \"black\")\n    sethue(color)\n    circle(O, radius + 4, :fill) # The 4 is to make the circle not so small\nend","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Essentially, all the element function does is create a circle in the middle of the frame with a radius of 5.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"From there, we need to define one Object for our animation to display the element we are viewing and scaling:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"...\natom = Object(1:550, (args...; radius = 1) -> element(; radius = radius, color = \"black\"))\nact!(\n    atom,\n    [\n        Action(101:140, change(:radius, 1 => 12)),\n        Action(241:280, change(:radius, 12 => 20)),\n        Action(381:420, change(:radius, 20 => 7)),\n        Action(521:550, change(:radius, 7 => 1)),\n    ],\n)\n...","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"change is used here to change the given radius of the circle in element from 1 to 12, from 12 to 20, 20 to 7, and finally 7 to 1. This updates the circle being drawn and gives a growing or shrinking effect. change interpolates the values in between what we want to change the value from to what the value we want to change to.  It can be additionally used to simply set a value without interpolation (since v0.3.3).","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"That scaling looks like this:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Staring at this somewhat makes me think of a black hole... ⚫ But great! The only question now is... What are we looking at? Let's add some more information to this animation! 📝","category":"page"},{"location":"tutorials/tutorial_6/#How-Much-Does-an-Atom-Weigh?","page":"Tutorial 6: Taming the Elements","title":"How Much Does an Atom Weigh? ⚖️","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"To get the information about an element that we are currently previewing, we need to get information about our element. So, how do we do that?","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"To identify the element and display its information properly, let's create an info box similar to what we made in Tutorial 3! We do this by creating an info_box function that takes in an element:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"function info_box(; element = elements[1])\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    box(0, 175, 450, 100, :stroke)\n    text(\"Element name: $(element.name)\", 140, -220, valign = :middle, halign = :center)\n    text(\n        \"Atomic Mass: $(round(ustrip(element.atomic_mass)))\",\n        140,\n        -200,\n        valign = :middle,\n        halign = :center,\n    )\n    textwrap(\"Description: $(element.summary)\", 400, Point(-200, 125))\nend","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"To pass the element into the info_box function, we need to define an Object command to create our boxes. Then, we can change the element being passed in:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"...\ninfo = Object(1:550, (args...; elem = 1) -> info_box(element = elements[round(Int, elem)]))\n\nact!(info, Action(1:30, sineio(), appear(:fade)))\nact!(info, Action(71:100, sineio(), disappear(:fade)))\nact!(info, Action(101:101, change(:elem, 1 => 12)))\n\nact!(info, Action(140:170, sineio(), appear(:fade)))\nact!(info, Action(210:241, sineio(), disappear(:fade)))\nact!(info, Action(280:280, change(:elem, 12 => 20)))\n\nact!(info, Action(280:310, sineio(), appear(:fade)))\nact!(info, Action(350:381, sineio(), disappear(:fade)))\nact!(info, Action(381:420, change(:elem, 20 => 7)))\n\nact!(info, Action(420:450, sineio(), appear(:fade)))\nact!(info, Action(490:521, sineio(), disappear(:fade)))\nact!(info, Action(520:550, change(:elem, 7 => 1)))\n...","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Here, change is being used to change the element, elem, being queried from PeriodicTable.jl over one frame. This gives us the updated information about each atom! Furthermore, using the method appear(:fade) and disappear(:fade) and sineio(), we get a nice fading effect to easily transition between each element.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"NOTE: sineio() comes from Animations.jl and is an easing function.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"More on this in Tutorial 6.","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Now, let's look at that gif shall we?","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Hooray! 🎉🎉🎉 We now have a very educational gif that tells us all about the elements we are viewing. We are basically physicists at this point. 😉","category":"page"},{"location":"tutorials/tutorial_6/#Conclusion","page":"Tutorial 6: Taming the Elements","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Great work getting through this tutorial! This tutorial was a little more complicated as you learned the following:","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Using Javis.jl to change animations in progress\nHaving Javis.jl interact with other Julia packages\nCreating extended animations for use in education","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Our hope with this tutorial is that it inspires you to create more comprehensive and informative animations with Javis.jl Good luck and have fun making more animations!","category":"page"},{"location":"tutorials/tutorial_6/#Full-Code","page":"Tutorial 6: Taming the Elements","title":"Full Code","text":"","category":"section"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"using Animations\nusing Javis\nusing PeriodicTable\nusing Unitful\n\nfunction ground(video, action, frame)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction element(; radius = 1, color = \"black\")\n    sethue(color)\n    circle(O, radius + 4, :fill)\nend\n\nfunction info_box(; element = elements[1])\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    box(0, 175, 450, 100, :stroke)\n    text(\"Element name: $(element.name)\", 140, -220, valign = :middle, halign = :center)\n    text(\n        \"Atomic Mass: $(round(ustrip(element.atomic_mass)))\",\n        140,\n        -200,\n        valign = :middle,\n        halign = :center,\n    )\n    textwrap(\"Description: $(element.summary)\", 400, Point(-200, 125))\nend\n\ndemo = Video(500, 500)\n\nBackground(1:550, ground)\n\natom = Object(1:550, (args...; radius = 1) -> element(; radius = radius, color = \"black\"))\nact!(\n    atom,\n    [\n        Action(101:140, change(:radius, 1 => 12)),\n        Action(241:280, change(:radius, 12 => 20)),\n        Action(381:420, change(:radius, 20 => 7)),\n        Action(521:550, change(:radius, 7 => 1)),\n    ],\n)\n\ninfo = Object(1:550, (args...; elem = 1) -> info_box(element = elements[round(Int, elem)]))\n\nact!(info, Action(1:30, sineio(), appear(:fade)))\nact!(info, Action(71:100, sineio(), disappear(:fade)))\nact!(info, Action(101:101, change(:elem, 1 => 12)))\n\nact!(info, Action(140:170, sineio(), appear(:fade)))\nact!(info, Action(210:241, sineio(), disappear(:fade)))\nact!(info, Action(280:280, change(:elem, 12 => 20)))\n\nact!(info, Action(280:310, sineio(), appear(:fade)))\nact!(info, Action(350:381, sineio(), disappear(:fade)))\nact!(info, Action(381:420, change(:elem, 20 => 7)))\n\nact!(info, Action(420:450, sineio(), appear(:fade)))\nact!(info, Action(490:521, sineio(), disappear(:fade)))\nact!(info, Action(520:550, change(:elem, 7 => 1)))\n\nrender(demo, pathname=\"tutorial5.gif\", framerate = 10)","category":"page"},{"location":"tutorials/tutorial_6/","page":"Tutorial 6: Taming the Elements","title":"Tutorial 6: Taming the Elements","text":"Author(s): Jacob Zelko \nDate: September 10, 2020 \nTag(s): change, atoms, elements, appear, disappear, fade, unitful, periodictable","category":"page"},{"location":"workflows/#Workflows-for-Javis-Animation-Development","page":"Workflows","title":"Workflows for Javis Animation Development","text":"","category":"section"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Javis provides an easy way to create performant visualizations. However, sometimes building these animations can be a difficult process with having to keep track of one's code, particular frames, and previewing your graphic. This section is dedicated to workflows one can use for making Javis animations.","category":"page"},{"location":"workflows/#Previewing-Animations-Using-the-Javis-Live-Viewer","page":"Workflows","title":"Previewing Animations Using the Javis Live Viewer","text":"","category":"section"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Supported Platforms: Windows*, OSX, Linux","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"NOTE: Windows users may experience a slow-down with the Javis Live Viewer.  This is because the viewer is built on top of GTK which is not immensely performant on Windows machines. If the viewer is does not perform well on Windows for you, we encourage you to try out one of the other workflows.","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Javis provides a built-in viewer called the \"Javis Live Viewer\" which allows one to preview animated graphics without having to save the animation to a file. This works by the viewer calculating each individual frame for an animation as it is called. The viewer can be activated for any animation one renders by doing this:","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"...\nrender(video, liveview = true)","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Setting liveview to true in the render function causes the Viewer to appear in a separate window. Here is an example of how that looks altogether:","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"(Image: )","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Sometimes the Viewer can be slow on some computers if it is handling a large animation or a frame performing complicated actions with many objects. If this is the case, currently, the best way to handle this is to fully render the animation and save it to a file for previewing. In the future, we will add a caching feature for the Viewer such that all frames are pre-rendered for the Viewer so one can quickly view each frame.","category":"page"},{"location":"workflows/#Working-with-Pluto-and-Jupyter-Notebooks","page":"Workflows","title":"Working with Pluto and Jupyter Notebooks 📓","text":"","category":"section"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Javis has the ability to work completely within Jupyter and Pluto notebooks! It uses the package, JavisNB, within the JuliaAnimators ecosystem to enable very simple support for Jupyter and Pluto. Please see the documentation for JavisNB to learn how it works and to use it!","category":"page"},{"location":"workflows/#Live-Streaming","page":"Workflows","title":"Live Streaming","text":"","category":"section"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Javis supports directing animations to streaming software after rendering a visualization.","category":"page"},{"location":"workflows/#Streaming-Locally","page":"Workflows","title":"Streaming Locally","text":"","category":"section"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Many professionals and streamers prefer using streaming tools, such as OBS Studio and VLC Media Player, to have more creative control over their lectures or streams. Javis live streaming is tuned for such use cases. The animation can be streamed to a local IP or port and be viewed using any tool that can read from a network stream.","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Firstly, one needs to setup the StreamConfig object that holds configuration regarding the streaming process. That is as simple as this one line of code in your animation script:","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"stream_conf = setup_stream(:local)","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"After that, you can render your animation to a network platform of your choice by editing the render command:","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"render(vid, streamconfig=stream_conf)","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Javis uses udp://0.0.0.0:14015 as the default streaming protocol, address and port respectively.  However you're free to use any options of your choice.","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"NOTE: While you can stream to any IP/port, we recommend using the default streaming protocol udp if you wish to share the stream with other people (connected over the network) or tools like OBS Studio. ","category":"page"},{"location":"workflows/#Streaming-to-Local-Networks","page":"Workflows","title":"Streaming to Local Networks","text":"","category":"section"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Javis also can be used to share an animation with a group of people connected over the same network. One can start streaming and other people can access the stream  To start a stream, it is the exact same process as a typical local stream:","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"stream_conf = setup_stream(:local)\nrender(vid, streamconfig=stream_conf)","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"From there, anyone can open up the stream and view it using a viewing tool of their choice.","category":"page"},{"location":"workflows/#Tools-for-Viewing-Live-Streams","page":"Workflows","title":"Tools for Viewing Live Streams","text":"","category":"section"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"To view live streams generated from Javis, we recommend the following tools (although any tool that supports network streaming will do): using tools like VLC, ffplay, mplayer etc.","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"OBS Studio - to view on OBS Studio, you will need to add a \"Media Source\" that defines the stream output from Javis.","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"To do that, make sure that the option for \"Local File\" is unchecked, and type in the location of the network stream that you have set (the default is: udp://0.0.0.0:14015) to \"Input\". Finally, change the \"Input Format\" to mpegts and you should be set to view the rendering!","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"NOTE: Currently, OBS Studio has an issue where once the stream is done, the last frame sent from Javis is kept on the screen.","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"You will have to manually turn off the source or hide it in the OBS Studio client.","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"ffplay - on a command line, one can view a stream by typing ffplay <protocol>://<address>:<port>.","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Using the default, an example would be ffplay udp://0.0.0.0:14015 for viewing a Javis rendering.","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"VLC Media Player - to use VLC, go to \"Media\" and then to \"Open Network Stream\".","category":"page"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"Finally after that, go to the \"Network\" tab and, per the Javis default, put udp://@:14015 as the network URL and select \"Play\".","category":"page"},{"location":"workflows/#Twitch-Support-Coming-Soon!","page":"Workflows","title":"Twitch Support - Coming Soon!","text":"","category":"section"},{"location":"workflows/","page":"Workflows","title":"Workflows","text":"### Streaming to Twitch\n\n\nJavis allows streaming animations directly to the [Twitch](twitch.tv) platform.\nAll you need to do is pass the symbol `:twitch` and your [twitch stream key](https://www.businessinsider.in/tech/how-to/how-to-find-your-twitch-stream-key-which-will-let-you-start-streaming-games-and-access-other-features/articleshow/76450099.cms) as arguments to the `stream_setup` method.\n```julia\n...\nstream_conf = setup_stream(:twitch, twitch_key = \"<twitch stream key>\")\nrender(vid, streamconfig=stream_conf)\n```","category":"page"},{"location":"tutorials/tutorial_2/#**Tutorial-2:**-Cosmic-Dancing-and-Javis-Shorthand-Expressions!","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"In the previous tutorial, when you were creating the red and blue balls, you came across syntax that looked something like this:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"(args...) -> object(....)","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"As promised, here is the explanation of what this syntax is:  It declares an anonymous function that eases Javis rendering. If you are new to Julia or haven't worked with anonymous function declarations before,  this can be quite difficult to understand! 🤯","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"Even for seasoned Julians, this syntax can make it hard to see everything that is happening in your code.  But, have no fear, Javis shorthand expressions are here! Javis shorthand expressions, also affectionately referred to as J-Objects, are Javis-made expressions that define commonly used objects via a simple syntax.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"By the end of this tutorial, you will have made the following animation with J-Objects that follows the paths of Earth and Venus while going around the sun in a beautiful Cosmic Dance!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/#Learning-Outcomes","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"Through this tutorial you will be introduced to Javis shorthand expressions and specifically learn about the following J-Objects provided by Javis:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"JCircle\nJShape","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"This will help you more easily create animations using Javis!","category":"page"},{"location":"tutorials/tutorial_2/#Space...-The-Final-Frontier!","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Space... The Final Frontier! 🌌 🌠","text":"","category":"section"},{"location":"tutorials/tutorial_2/#An-Infinite-Cosmos","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"An Infinite Cosmos","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"To start things slowly, let's create a space in the infinite cosmos where our planets will perform their cosmic dance! Meaning: let's create the Background!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"function ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend","category":"page"},{"location":"tutorials/tutorial_2/#...-Planets!","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"💥 ... Planets!","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"In our last tutorial, we created circles to represent planets.  We'll be doing something similar but, this time, with J-Objects!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"If you recall, we had to define our own special function to define a circle that we wanted to use in our last animation. Now, instead, we will use, the J-Object, JCircle.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"JCircle is pretty flexible and takes in arguments similar to Luxor.jl's circle() function that we used in the previous tutorial. However, we do not have to use the verbose syntax as before, but instead, we can use a much more readable syntax. For example, we can define Earth and Venus as shown below:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"function ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nframes = 1000\n\nmyvideo = Video(500, 500)\nBackground(1:frames, ground)\n\nearth = Object(1:frames, JCircle(O, 10, color = \"blue\", action = :fill), Point(200, 0))\nvenus = Object(JCircle(O, 7, color = \"red\", action = :fill), Point(144, 0))\n\nrender(myvideo; pathname = \"cosmic_dance.gif\")","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"Tada! 💥 We have created our own galaxy! Now that we have created some planets, we should map their orbits - we don't want them crashing into each other!","category":"page"},{"location":"tutorials/tutorial_2/#Swiftly-Tilting-Axes","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Swiftly Tilting Axes 🌐","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"In the previous tutorial we used a path! function to create the orbits of the planets.  In its place, we will use @JShape to trace out the orbits of the planets. ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"@JShape is a macro that allows users to create complex objects with custom settings - all using J-Object syntax! All the parameters used inside @JShape, such as defining colors or actions, are within the begin...end provided by the macros. ","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"Here is how we use @JShape to define the orbits of a planet:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"...\n\nearth = Object(1:frames, JCircle(O, 10, color = \"blue\", action = :fill), Point(200, 0))\nvenus = Object(1:frames, JCircle(O, 7, color = \"red\", action = :fill), Point(144, 0))\n\nearth_orbit = Object(@JShape begin\n    sethue(color)\n    setdash(edge)\n    circle(O, 200, action)\nend color = \"white\" action = :stroke edge = \"solid\")\n\nvenus_orbit = Object(@JShape begin\n    sethue(color)\n    setdash(edge)\n    circle(O, 144, action)\nend color = \"white\" action = :stroke edge = \"solid\")\n\nrender(myvideo; pathname = \"cosmic_dance.gif\")","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/#Let's-Get-Moving!","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Let's Get Moving! 🏎️","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"Now that we have the paths of the planets defined, and our planets created, I think something is missing... Oh! Let's set them in motion! For that, we will use some Action's to make them move (read the code comments to see how that happens):","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"...\n\n# We need the planets to revolve according to their time periods.\n# Earth completes its one revolution in 365 days and Venus does that in 224.7 days.\n# Hence, we need to multiply (224.7/365) so that the time period matches properly i.e.,\n# When Venus completes its full revolution, Earth has done (224.7/365) th of its revolution.\nact!(earth, Action(anim_rotate_around(12.5 * 2π * (224.7 / 365), O)))\nact!(venus, Action(anim_rotate_around(12.5 * 2π, O)))\n\nrender(myvideo; pathname = \"cosmic_dance_revolution.gif\")","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/#A-Beautiful-Dance","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"A Beautiful Dance 🌸","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"Now that we have our planets moving, it would be interesting to see how the space between them changes over time. So, using our @JShape macro and \"connector\" syntax we used in the last tutorial, we can do just that! Let's trace out their changing paths that Earth and Venus follow!","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"...\n\nconnection = [] # To store the connectors\nObject(@JShape begin\n    sethue(color)\n    push!(connection, [p1, p2])\n    map(x -> line(x[1], x[2], :stroke), connection)\nend connection = connection p1 = pos(earth) p2 = pos(venus) color = \"#f05a4f\")\n\nrender(myvideo; pathname = \"cosmic_dance_path.gif\")","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"Like real dancers, watching this animation is both beautiful and trance like. Great job making this! ","category":"page"},{"location":"tutorials/tutorial_2/#Conclusion","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"Good work on getting through this tutorial! By learning how to make this animation, you now know a bit more about J-Objects and how they can make creating Javis animations easier and also more readable. You should note, the other syntax is still supported and for some more complex animations, that syntax might be better than J-Objects.","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"Also, J-Objects don't end here! Javis supports a variety of additional J-Objects you should consider using! For example:","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"function ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nframes = 1\n\nmyvideo = Video(500, 500)\nBackground(1:frames, ground)\n\n# Line\nObject(1:frames, JLine(Point(100, -250), color = \"yellow\"))\n\n# Box\nObject(JBox(Point(-200, -200), Point(200, 200), color = \"white\", action = :stroke))\n\n# Rect\nObject(JRect(175, 15, 30, 55, color = \"white\", action = :fill))\n\n# Ellipse\nObject(JEllipse(-50, 25, 45, 25, color = \"yellow\", action = :fill))\n\n# Star\nObject(JStar(0, 120, 45, color = \"orange\", action = :fill))\n\n# Polygon\nObject(JPoly(ngon(O, 150, 3, -π / 2, vertices = true), color = \"yellow\"))\n\nrender(myvideo; pathname = \"shorthand_examples.gif\")","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"That said, congrats and go forth and make more animations! We are excited to see what you create!","category":"page"},{"location":"tutorials/tutorial_2/#Full-Code","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Full Code","text":"","category":"section"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"using Javis\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nframes = 1000\n\nmyvideo = Video(500, 500)\nBackground(1:frames, ground)\n\nearth = Object(1:frames, JCircle(O, 10, color = \"blue\", action = :fill), Point(200, 0))\nvenus = Object(1:frames, JCircle(O, 7, color = \"red\", action = :fill), Point(144, 0))\n\nearth_orbit = Object(@JShape begin\n    sethue(color)\n    setdash(edge)\n    circle(O, 200, action)\nend color = \"white\" action = :stroke edge = \"solid\")\n\nvenus_orbit = Object(@JShape begin\n    sethue(color)\n    setdash(edge)\n    circle(O, 144, action)\nend color = \"white\" action = :stroke edge = \"solid\")\n\n# We need the planets to revolve according to their time periods.\n# Earth completes its one revolution in 365 days and Venus does that in 224.7 days.\n# Hence, we need to multiply (224.7/365) so that the time period matches properly i.e.,\n# When earth completes its full revolution, Venus has done (224.7/365) th of its revolution.\nact!(earth, Action(anim_rotate_around(12.5 * 2π * (224.7 / 365), O)))\nact!(venus, Action(anim_rotate_around(12.5 * 2π, O)))\n\nconnection = [] # To store the connectors\nObject(@JShape begin\n    sethue(color)\n    push!(connection, [p1, p2])\n    map(x -> line(x[1], x[2], :stroke), connection)\nend connection = connection p1 = pos(earth) p2 = pos(venus) color = \"#f05a4f\")\n\nrender(myvideo; pathname = \"cosmic_dance.gif\")\n","category":"page"},{"location":"tutorials/tutorial_2/","page":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","title":"Tutorial 2: Cosmic Dancing and Javis Shorthand Expressions!","text":"Author(s): Arsh Sharma \nDate: July 7th, 2021 \nTag(s): shorthands, object, action, rotation \nCredit(s): Ved Mahajan for the cosmic dance example","category":"page"},{"location":"tutorials/tutorial_7/#**Tutorial-7:**-Using-Animations.jl-to-Create-something-with-more-Pep!","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"","category":"section"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"In the last couple of tutorials you've learned the basics of Javis and some of the more advanced stuff like Action.","category":"page"},{"location":"tutorials/tutorial_7/#Our-goal","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Our goal","text":"","category":"section"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"The goal of this tutorial is to explain a new functionality in Javis that adds more pep to your animations. Before this every animation was basically linear. What I mean by this is: If you move an object from A to B using anim_translate it would do so in a linear and therefore boring fashion.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"We'll create an interesting loading animation for this. It consists of five circles which move from the center of a frame, follow a circular path around the center of the frame and finishes back at the center of the frame. During this process they appear and disappear and change color.","category":"page"},{"location":"tutorials/tutorial_7/#Learning-Outcomes","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Javis combined with the power of the awesome library Animations.jl enables you to have very fine grained control over the objects you animate and understand the ease easing functions. 😄","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Today you'll learn how to","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Use easing functions to have animations with pep\nHave full control over the animation of objects\nCreate a beautiful (if I can say so myself) loading animation","category":"page"},{"location":"tutorials/tutorial_7/#Moving-with-Different-Speed","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Moving with Different Speed","text":"","category":"section"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"The main point of this tutorial is to explain how to basically \"interact\" with objects moving at non-linear speeds. Our first step will be to rotate a circle around the origin at an increasing and then decreasing speed.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Let's start with the boring linear animation:","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"using Javis\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nvideo = Video(600, 400)\nBackground(1:200, ground)\n\nblob = Object((args...) -> circle(O, 20, :fill), Point(150, 0))\nact!(blob, Action(anim_rotate_around(0.0, 2π, O)))\n\nrender(\n    video,\n    pathname = \"loading.gif\",\n)","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"(Image: Linear movement)","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"I would say that this looks a bit dull. Let us rotate it with varying speeds. For this I'll use the sineio easing function.  You can try other easing functions described here.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Easing functions basically describe how to interpolate between the values. If one goes from 0 to 5 in the time range of 0 to 1, it can be speed 2.5 at t = 0.5 or it can start slowly and speed up until it reaches the final value of 5 such that at t = 0.5 it is only at let say 1.5 speed.  This way one can describe the speed/acceleration of the object.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"First of all we need Animations for this and I will also load Colors now for later.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"These can be installed via ] add Animations and ] add Colors inside the REPL.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Animations.jl defines easing functions such that we can have non-linear movement\nColors.jl defines colors and gives access to different color spaces such that we can transition from a color to another by using Animations.jl.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"using Javis, Animations, Colors\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nrotate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [0, 2π],\n    [sineio()],\n)\n\nvideo = Video(600, 400)\nBackground(1:200, ground)\n\nblob = Object((args...) -> circle(O, 20, :fill), Point(150, 0))\nact!(blob, Action(rotate_anim, rotate_around(O)))\n\nrender(\n    video,\n    liveview=true,\n    pathname = \"loading.gif\",\n)","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"(Image: Rotation with varying speed)","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"I think that looks more interesting. The Animations.jl package is very powerful so you might wanna head over to their documentation and try different things.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Nevertheless, let me explain this part a bit and you can check out the documentation for more details.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"rotate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [0, 2π],\n    [sineio()],\n)","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"The Animation function takes in three arguments which are all vectors:","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Describe the time stamps.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"They should always go from 0 to 1 inside Javis.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"The values at the different time stamps.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Here we start at 0 radians and end with 2π radians.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"The easing functions describe how to move from one value to the next.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"It must be always one less than the number of time stamps/values","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"We can actually have a look at this in a graphical plot:","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"using Animations\nusing Plots\n\nrotate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [0, 2π],\n    [sineio()],\n)\n\nts = 0:0.01:1\nys = at.(rotate_anim, ts)\n\nplot(ts, ys; labels = false, xaxis = \"t\", yaxis = \"value\")","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"(Image: Sineio plot)","category":"page"},{"location":"tutorials/tutorial_7/#Precise-Movement","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Precise Movement","text":"","category":"section"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Okay we now know how to rotate with a different speed but let's do what we actually wanted: moving circles from the center, having them follow a circular path and then put them back at the center. The code gets a bit longer from time to time so I'll only add changes from now on in the following way. If I add something called _anim you can put it directly after rotate_anim. I'll otherwise only add some more objects and actions.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Our new animations:","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"One translating from the origin to the right ","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"translate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(150, 0)],\n    [sineio()],\n)","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"and one translating back. One needs to make sure that it always starts at the origin (the current origin of the already translated view) to not introduce a break in the animation.  More about that later.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"translate_back_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(-150, 0)],\n    [sineio()],\n)","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"and or object and actions:","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"blob = Object((args...) -> circle(O, 20, :fill))\nact!(blob, Action(1:50, translate_anim, translate()))\nact!(blob, Action(51:150, rotate_anim, rotate_around(Point(-150, 0))))\nact!(blob, Action(151:200, translate_back_anim, translate()))","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"I changed the starting position of the circle to O and we now have three actions.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Let's walk through the steps Javis takes to create the animation:","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"For the first 50 frames of the action the circle is translated from O to (150, 0) so just to the right. \nRemember the O is the same as (0, 0) and is at the center of the canvas at the beginning.\nThen the circle is at position (150, 0).\nIt is still drawn at the origin so actually we shifted our whole view to the right.\nFor the next 100 frames we need to specify that we actually want to rotate around the shifted origin which is at Point(-150, 0) from our current perspective. \nAfterwards we are now again at (150, 0) but see it as our origin and therefore need to move our circle to the left to Point(-150, 0) which is the shifted origin. ","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Let's see it in action:","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"(Image: The loading movement)","category":"page"},{"location":"tutorials/tutorial_7/#Adding-more-Blobs!","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Adding more Blobs!","text":"","category":"section"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"The blob does start to feel lonely a bit so let's give him some friends. They should all do the same movement but start at different times.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"for frame_start in 1:10:50\n    blob = Object(frame_start:frame_start+149, (args...) -> circle(O, 20, :fill))\n    act!(blob, Action(1:30, translate_anim, translate()))\n    act!(blob, Action(31:120, rotate_anim, rotate_around(Point(-150, 0))))\n    act!(blob, Action(121:150, translate_back_anim, translate()))\nend","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"I've basically added four more blobs by using for frame_start in 1:10:50. ","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Then I defined the start of each object with: frame_start:frame_start+149 such that every blob is there for 150 frames and reduced the number of frames in the actions a bit to have 150 frames.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"(Image: The loading movement with some friends)","category":"page"},{"location":"tutorials/tutorial_7/#How-about-Color?","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"How about Color?","text":"","category":"section"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Okay everything is dull when we only use white and black.  Let's make it such that our blobs change color from red over cyan to black which also make them disappear.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"color_anim = Animation(\n    [0, 0.5, 1], # must go from 0 to 1\n    [Lab(colorant\"red\"), Lab(colorant\"cyan\"), Lab(colorant\"black\")],\n    [sineio(), sineio()],\n)","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"This time we actually have not only a start and end point of our animation but a point in between. We therefore have three timestamps 0.0 , 0.5 and 1.0. Our three colors are red, cyan and black. You can play with different colors and color spaces if you want.  And we need two easing functions: one defines the movement from red to cyan and the second from cyan to black.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"for frame_start in 1:10:50\n    blob = Object(frame_start:frame_start+149, (args...) -> circle(O, 20, :fill))\n    act!(blob, Action(1:30, translate_anim, translate()))\n    act!(blob, Action(31:120, rotate_anim, rotate_around(Point(-150, 0))))\n    act!(blob, Action(121:150, translate_back_anim, translate()))\n    act!(blob, Action(1:150, color_anim, sethue())) # new line\nend","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"The change in color is over the entire action in this case.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"(Image: Loading with color)","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"I think that already looks quite nice. The appearance of the blobs is a bit off though. How about fading them in by scaling them up?","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"for frame_start in 1:10:50\n    blob = Object(frame_start:frame_start+149, (args...) -> circle(O, 20, :fill))\n    act!(blob, Action(1:10, sineio(), appear(:scale))) # new line\n    act!(blob, Action(1:30, translate_anim, translate()))\n    act!(blob, Action(31:120, rotate_anim, rotate_around(Point(-150, 0))))\n    act!(blob, Action(121:150, translate_back_anim, translate()))\n    act!(blob, Action(1:150, color_anim, sethue()))\nend","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"A deeper look into the line we added?","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"act!(blob, Action(1:10, sineio(), appear(:scale)))","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"If we want to animate from 0 to 1 we don't need to write an Animation object for this and can simply specify the easing function.  Additionally we use the appear(:scale) which does the same thing as:","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"act!(blob, Action(1:10, sineio(), scale()))","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"but it might be easier to read when we attach the meaning of appear to it. Check out appear and disappear for more of an explanation.","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"(Image: The loading animation)","category":"page"},{"location":"tutorials/tutorial_7/#Conclusion","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"To recap, by working through this animation you should now:","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Understand how to make objects move in a non-linear way using Animations.jl\nBe able to scale, translate, rotate objects in a finer control\nHave fun with colors!","category":"page"},{"location":"tutorials/tutorial_7/#The-Code","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"The Code","text":"","category":"section"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"using Javis, Animations, Colors\n\nfunction ground(args...)\n    background(\"black\")\n    sethue(\"white\")\nend\n\nrotate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [0, 2π],\n    [sineio()],\n)\n\ntranslate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(150, 0)],\n    [sineio()],\n)\n\ntranslate_back_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(-150, 0)],\n    [sineio()],\n)\n\ncolor_anim = Animation(\n    [0, 0.5, 1], # must go from 0 to 1\n    [Lab(colorant\"red\"), Lab(colorant\"cyan\"), Lab(colorant\"black\")],\n    [sineio(), sineio()],\n)\n\nvideo = Video(600, 400)\nBackground(1:200, ground)\n\nfor frame_start in 1:10:50\n    blob = Object(frame_start:frame_start+149, (args...) -> circle(O, 20, :fill))\n    act!(blob, Action(1:10, sineio(), appear(:scale))) # new line\n    act!(blob, Action(1:30, translate_anim, translate()))\n    act!(blob, Action(31:120, rotate_anim, rotate_around(Point(-150, 0))))\n    act!(blob, Action(121:150, translate_back_anim, translate()))\n    act!(blob, Action(1:150, color_anim, sethue()))\nend\n\nrender(\n    video;\n    pathname = \"loading.gif\",\n)","category":"page"},{"location":"tutorials/tutorial_7/","page":"Tutorial 7: Using Animations.jl to Create something with more Pep!","title":"Tutorial 7: Using Animations.jl to Create something with more Pep!","text":"Author(s): Ole Kröger \nDate: September 10th, 2020 \nTag(s): loading, action, Animations.jl, easing","category":"page"},{"location":"mission/#Project-Mission","page":"Mission","title":"Project Mission","text":"","category":"section"},{"location":"mission/#What-is-Javis?","page":"Mission","title":"What is Javis?","text":"","category":"section"},{"location":"mission/","page":"Mission","title":"Mission","text":"Javis.jl is a tool focused on providing an easy to use interface for making animations and developing visualizations quickly - while having fun! 😃","category":"page"},{"location":"mission/","page":"Mission","title":"Mission","text":"That being said, we decided to make this mission statement to clearly explain the scope of this project. That is, to explain what this project is and what it is not. Here are the core tenents of Javis concisely explained:","category":"page"},{"location":"mission/","page":"Mission","title":"Mission","text":"Javis is not a plotting library. Though Javis can do many things, we have no intention of turning this package into a complete plotting library. There may be some elements of plotting we use in this package but it will be limited to accomplish different animation functionality (e.g. animating vectors, etc.). If we do expand the project towards plotting, we will most likely seek interoperability with packages such as Plots.jl or Gadfly.jl.\nJavis focuses on freedom for the user. We approach Javis in the same way an artist approaches an empty canvas. We provide the basic tools but it is up to the user to create most of the functionality they wish to see. Therefore, we won't provide functions that should be handled by other packages or are generally domain specific (e.g. implementing a logistic regression function, generating sparse matrices, etc.). \nJavis seeks to explore and explain. Javis should enable a user in nearly any domain the ability to better explore and explain the phenomena they are analyzing. If there are core visualization elements of a domain that you think should be added, we are open to discussion. Please open an issue and let us know.\nJavis is not neccesarilly geared towards data analytics. Admittedly, there are ways to use Javis to visualize data while creating animations. However, the intent of Javis is not focused on creating functionality to analyze datasets as of this moment. This may change in the future.\nWe love documentation and tutorials! 🤓 One of the things we prioritize in each release of Javis is to document functionalities of the tools we add. Furthermore, we like to make tutorials to also show what is possible in Javis. Do you have a cool animation or blog that you have written using Javis? Let us know by opening an issue!","category":"page"},{"location":"mission/#Summary","page":"Mission","title":"Summary","text":"","category":"section"},{"location":"mission/","page":"Mission","title":"Mission","text":"In summary, Javis.jl focuses on creating an easy to use interface written in Julia to create visualizations and animations. What Javis is, is a tool for exploration that gives great freedom and flexibility to a user. What it is not is a domain specific library for making a limited subset of visualizations or a true data analytics tool.","category":"page"},{"location":"mission/#Acknowledgements","page":"Mission","title":"Acknowledgements","text":"","category":"section"},{"location":"mission/","page":"Mission","title":"Mission","text":"Our project mission was inspired by the mission, philosophy, and interface of projects such as manim, Fedora, Zotero, Spaceship ZSH, and rclone.","category":"page"},{"location":"tutorials/tutorial_4/#**Tutorial-4:**-Rendering-LaTeX-with-Javis!","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"This is a rather brief tutorial about an exciting functionality of Javis.jl: the ability to render LaTeX!","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"If you have never heard of LaTeX before, we highly recommend these resources:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"What Is LaTeX?\nLearn LaTeX in 30 minutes","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"When you are done with this tutorial, you will have created the following visualization:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_4/#Learning-Outcomes","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"From this project tutorial you will:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Learn how to render LaTeX using Javis.","category":"page"},{"location":"tutorials/tutorial_4/#Set-Up","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Set Up","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"As demonstrated in prior tutorials, we will use Javis to create a Video object.  However, we also have one more package included this time - LaTeXStrings!","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"It is a great package that can be installed via the following command:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"julia> ] add LaTeXStrings","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Now that it is installed, we need to use the following packages for this tutorial: ","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"using Javis\nusing LaTeXStrings","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"LaTeXStrings.jl is a tool that allows for the convenient input and display of LaTeX equations using Julia String objects. It requires a special syntax which looks like this:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"my_latex_string = L\"9\\frac{3}{4}\"","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Which would then render to this LaTeX:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"9frac34","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Let's define our background function to create the backdrop of our frames:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"function ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Since we are making a visualization, we will only generate one frame and set the framerate to 1:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"demo = Video(300, 200)\nBackground(1:1, ground)\nrender(demo; pathname = \"latex.gif\", framerate = 1)","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Finally, we need to install a node package and additional Julia package for this tutorial. If you are unfamiliar with node, please visit their website for more information to set-up node on your machine.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"ATTENTION: This next step is critical or else you WILL encounter numerous errors.  If you have not installed node, this tutorial WILL fail for you. ","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"We can accomplish this with the following execution","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"npm install -g mathjax-node-cli","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Currently, Julia does not have the ability (yet) to render LaTeX natively.  Therefore, we must install an additional node package. Sadly. 😭","category":"page"},{"location":"tutorials/tutorial_4/#The-Writing-on-the-Wall","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"The Writing on the Wall 📝","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Now, let's render some LaTeX! To do so, we will define an additional function that we will call, draw_latex. Here is the code:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"function draw_latex(video, action, frame)\n    fontsize(50)\n    latex(\n        L\"\"\"\\begin{equation}\n        \\left[\\begin{array}{cc} \n        2 & 3 \\\\  4 & \\sqrt{5} \\\\  \n        \\end{array} \\right] \n        \\end{equation}\"\"\",\n        O,\n        valign = :middle,\n        halign = :center\n    )\nend","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Here is what this function does:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"The latex function is called to render a LaTeXString object. This particular string makes a matrix! The positional argument O specifies the top left corner for placing the latex text. The last 2 arguments specify the alignment with respect  to the top left corner point. These are optional and default to :top and :left respectively.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"NOTE: The default position is the origin (default: the center of the canvas)","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"We can run this code block to render the LaTeX by adding an Object under the Background line","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Object(draw_latex)","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Which produces the following visualization:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Math-magical! ✨ You just rendered your first bit of LaTeX using Javis! But, I must say, it looks quite... Bland. 😐","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Let's spice it up!","category":"page"},{"location":"tutorials/tutorial_4/#Throw-it-in-the-Blender!","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Throw it in the Blender!","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"A fun function that Luxor provides is the ability to blend colors together! To do so, let's modify the draw_latex function:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"function draw_latex(video, action, frame)\n    black_red = blend(O, Point(0, 150), \"black\", \"red\")\n    setblend(black_red)\n    fontsize(50)\n    latex(\n        L\"\"\"\\begin{equation}\n        \\left[\\begin{array}{cc} \n        2 & 3 \\\\  4 & \\sqrt{5} \\\\  \n        \\end{array} \\right] \n        \\end{equation}\"\"\",\n        O,\n        valign = :middle,\n        halign = :center\n    )\nend","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"The biggest change is that we added the blend and setblend functions. blend creates a linear blend between two points using two given colors - in this case, black and red. setblend applies the blend to the drawn object.  We also use the translate function this time as it makes writing the blend function easier.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Can you guess what happens when we execute the code with this newly updated draw_latex function? Here is what the output looks like:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Now that matrix looks, AWESOME. 😎","category":"page"},{"location":"tutorials/tutorial_4/#Conclusion","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Well done! You just finished a brief introduction to using LaTeX in Javis! There is more you can with Javis and LaTeX which will be explored in future tutorials.","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"As a reminder, you just learned how to render LaTeX using Javis! Go forth and produce more wonderful LaTeX creations! ","category":"page"},{"location":"tutorials/tutorial_4/#Full-Code","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Full Code","text":"","category":"section"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"In case you ran into any issues or confusion, here is the full code:","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"using Javis\nusing LaTeXStrings\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction draw_latex(video, action, frame)\n    black_red = blend(O, Point(0, 150), \"black\", \"red\")\n    setblend(black_red)\n    fontsize(50)\n    latex(\n        L\"\"\"\\begin{equation}\n        \\left[\\begin{array}{cc} \n        2 & 3 \\\\  4 & \\sqrt{5} \\\\  \n        \\end{array} \\right] \n        \\end{equation}\"\"\",\n        O,\n        :middle,\n        :center\n    )\nend\n\ndemo = Video(300, 200)\nBackground(1:1, ground)\nObject(draw_latex)\nrender(demo; pathname = \"latex.gif\", framerate=1)","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"","category":"page"},{"location":"tutorials/tutorial_4/","page":"Tutorial 4: Rendering LaTeX with Javis!","title":"Tutorial 4: Rendering LaTeX with Javis!","text":"Author(s): Jacob Zelko \nDate: August 16th, 2020 \nTag(s): latex, blend, LaTeXStrings, node","category":"page"},{"location":"tutorials/tutorial_8/#**Tutorial-8:**-Fun-with-Layers!-An-Intro-to-@JLayer","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"So far, we have been using Javis to create one animation at a time. This has been great and you should be proud of your Javis skills so far! However, what if I told you, there is a way to make multiple animations in one animation? 😎","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"And the way to do that? Layers - specifically, @JLayer's!","category":"page"},{"location":"tutorials/tutorial_8/#What-Even-Are-Layers?-And-What's-a-@Jlayer?","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"What Even Are Layers? And What's a @Jlayer?","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"A layer is a common concept used in several animation toolkits and image editing software.  You can imagine layers as transparent plastic sheets with images drawn on them. When you stack the sheets on top of each other, the overall picture is formed. An example of this is shown stacking of layers is shown below:","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"The image above comes from https://sites.google.com/a/ocdsb.ca/srishti-s-comp-tech/photoshop/important-elements and the simple explanation of layers came from here: https://learn.zoner.com/6-reasons-use-layers-photo-editing/","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"The goal of layers is to make it easy to divide an animation into different parts. They can then be worked on separately while the software takes care of the interactions between them. It can assist in easing the creation of complex videos or images composed of several simpler parts.","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"In Javis a @JLayer is the implementation of this idea, it allows you to enclose the content of an animation and to work on it - act! on it - just like on a single Object. This way we do not need to worry about all the interactions between different parts of a video by acting on them one by one. Instead we can let Javis do all that manual composition for us.","category":"page"},{"location":"tutorials/tutorial_8/#Going-Back-to-the-Basics","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Going Back to the Basics","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"In Tutorial 1, we learned how to make circles go around:","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"For this tutorial, we are going to reuse this animation but create an artistic animation similar to the works of famous American pop artist, Andy Warhol - here is an example:","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"Dollar Signs by Andy Warhol","category":"page"},{"location":"tutorials/tutorial_8/#Let's-Add-Some-Color!","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Let's Add Some Color!","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"First let's adjust the dancing circles animation to allow for color tweaking. As usual we start with all the functions we already defined in Tutorial 1:","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"using Javis\n\n# Different from tutorial one now background in black and pen is white\nfunction ground(args...)\n    background(\"black\") # canvas background\n    sethue(\"white\") # pen color\nend\n\nfunction path!(points, pos, color)\n    sethue(color)\n    push!(points, pos) # add pos to points\n    circle.(points, 2, :fill) # draws a circle for each point using broadcasting\nend","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"Now let's add small changes to the dancing circles to make it into a function and add arguments to choose the colors of the two circles each time.","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"function dancing_circles(c1, c2, start_pos = O)\n    path_of_red = Point[]\n    path_of_blue = Point[]\n\n    red_ball = Object(JCircle(O, 25, color = c1, action = :fill), start_pos + (100, 0))\n    act!(red_ball, Action(anim_rotate_around(2π, start_pos)))\n    blue_ball = Object(JCircle(O, 25, color = c2, action = :fill), start_pos + (200, 80))\n    act!(blue_ball, Action(anim_rotate_around(2π, 0.0, red_ball)))\n    Object(@JShape begin\n        path!(path_of_red, pos(red_ball), c1)\n    end)\n    Object(@JShape begin\n        path!(path_of_blue, pos(blue_ball), c2)\n    end)\nend","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"Now we have all the ingredients for a colored animation where we switched the color of the moving circles.","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"colored_planets = Video(500, 500)\nBackground(1:70, ground)\ndancing_circles(\"green\", \"orange\")\n\nrender(colored_planets, pathname=\"colored_planets.gif\")","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"This will result in the same animation but with different colors. Black has become more in vogue since Tutorial 1! 😉","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_8/#Moving-Our-Animation-with-Layers","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Moving Our Animation with Layers","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"We can now use layers to move around our previous animation. First we wrap it in a @JLayer macro:","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"myvideo = Video(500, 500)\nBackground(1:140, ground)\n\nl1 = @JLayer 1:140 begin\n    dancing_circles(\"green\", \"orange\")\nend","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"Then we act! on it just like on a regular Object.","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"act!(l1, Action(1:1, anim_scale(0.4)))\n\nanimation_point = Point(-75, -75)\nanim_back_and_forth = Animation(\n\t\t[0, 1/2, 1],\n\t\t[animation_point, -animation_point, animation_point],\n\t\t[sineio(), sineio()]\n\t)\n\t\nact!(l1, Action(1:140, anim_back_and_forth, translate()))\n\nrender(myvideo; pathname=\"dancing_circles_layer.gif\")","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"This lets you move the dancing circles animation around the video without any effort!!","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_8/#Organizing-Our-Creation","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Organizing Our Creation","text":"","category":"section"},{"location":"tutorials/tutorial_8/#Choose-Layers-Action-Points","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Choose Layers Action Points","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"Now we try to use this idea to compose several layers in a single video, in particular we will move 4 groups of dancing circles to create an Andy Warhol style ensemble of dancing circles!","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"First we pick the colors for our animation and where we want each of our layers to end up at when the layers are created from the origin:","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"colors = [\n    [\"red\", \"green\"],\n    [\"orange\", \"blue\"],\n    [\"yellow\", \"purple\"],\n    [\"greenyellow\", \"darkgoldenrod1\"]\n]\n\nfinal_points = [\n    Point(-150, -150),\n    Point(150, -150),\n    Point(150, 150),\n    Point(-150, 150),\n]","category":"page"},{"location":"tutorials/tutorial_8/#Initialize-the-Layers","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Initialize the Layers","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"Then we start the video and define our circles:","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"myvideo = Video(500, 500)\n\nBackground(1:140, ground)\n\nplanets = map(colors) do c\n    @JLayer 1:140 begin\n        dancing_circles(c...) \n    end\nend","category":"page"},{"location":"tutorials/tutorial_8/#Apply-an-Action-to-Each-Layer","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Apply an Action to Each Layer","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"We build the animation just like before but with different endpoints for each dancing  circle layer we created. We then apply a scaling action to the layers so we don't make the video overly crowded:","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"anim_back_and_forth = map(final_points) do point\n    Animation(\n        [0.0, 1/2, 1.0],\n        [O, point, O],\n        [sineio(), sineio()]\n    )\nend\n\nfor (animation, pl) in zip(anim_back_and_forth, planets)\n\n    # Scale the layers\n    act!(pl, Action(1:1, anim_scale(0.4)))\n\n    # Move them around\n    act!(pl, Action(1:140, animation, translate()))\nend","category":"page"},{"location":"tutorials/tutorial_8/#Voila!","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Voila! 🎨","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"Now finally, we can render this animation by running the following:","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"render(myvideo; pathname=\"tutorial_8.gif\")","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"You are an artist!","category":"page"},{"location":"tutorials/tutorial_8/#Conclusion","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"To wrap up, what you learned from this tutorial is how we can use @JLayer's to compose different ideas created with Javis and join them together without needing to manage each individual component of layer animations.  This adds a whole new layer (😃) of composability over Javis enabling entirely new approaches to creating complex animations with Javis! Go forth and create!","category":"page"},{"location":"tutorials/tutorial_8/#Full-Code","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Full Code","text":"","category":"section"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"using Javis\nusing Animations\n\nfunction ground(args...)\n    background(\"black\") # canvas background\n    sethue(\"white\") # pen color\nend\n\nfunction path!(points, pos, color)\n    sethue(color)\n    push!(points, pos) # add pos to points\n    circle.(points, 2, :fill) # draws a circle for each point using broadcasting\nend\n\nfunction dancing_circles(c1, c2, start_pos = O)\n    path_of_red = Point[]\n    path_of_blue = Point[]\n\n    red_ball = Object(JCircle(O, 25, color = c1, action = :fill), start_pos + (100, 0))\n    act!(red_ball, Action(anim_rotate_around(2π, start_pos)))\n    blue_ball = Object(JCircle(O, 25, color = c2, action = :fill), start_pos + (200, 80))\n    act!(blue_ball, Action(anim_rotate_around(2π, 0.0, red_ball)))\n    Object(@JShape begin\n        path!(path_of_red, pos(red_ball), c1)\n    end)\n    Object(@JShape begin\n        path!(path_of_blue, pos(blue_ball), c2)\n    end)\nend\n\nfinalvideo = Video(500, 500)\n\nBackground(1:140, ground)\n\ncolors = [\n    [\"red\", \"green\"],\n    [\"orange\", \"blue\"],\n    [\"yellow\", \"purple\"],\n    [\"greenyellow\", \"darkgoldenrod1\"],\n]\n\nfinal_points = [Point(-150, -150), Point(150, -150), Point(150, 150), Point(-150, 150)]\n\nplanets = map(colors) do c\n    @JLayer 1:140 begin\n        dancing_circles(c...)\n    end\nend\n\nanim_back_and_forth = map(final_points) do point\n    Animation([0.0, 1 / 2, 1.0], [O, point, O], [sineio(), sineio()])\nend\n\nfor (animation, pl) in zip(anim_back_and_forth, planets)\n\n    # Scale the layers\n    act!(pl, Action(1:1, anim_scale(0.4)))\n\n    # Move them around\n    act!(pl, Action(1:140, animation, translate()))\nend\n\nrender(finalvideo; pathname = \"tutoral_8.gif\")","category":"page"},{"location":"tutorials/tutorial_8/","page":"Tutorial 8: Fun with Layers! An Intro to @JLayer","title":"Tutorial 8: Fun with Layers! An Intro to @JLayer","text":"Author(s): @gpucce, Jacob Zelko \nDate: September 12th, 2021 \nTag(s): layers, art","category":"page"},{"location":"tutorials/tutorial_3/#**Tutorial-3:**-What-Are-Objects?","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"In this tutorial, we are going to learn how to make a brain! 🧠  Well, not exactly making a brain.  Instead, we are going to animate brain activity by simulating a 10-20 EEG Electrode Array using random data. ","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"When you are done with this tutorial, you will have created the following animation:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_3/#Learning-Outcomes","page":"Tutorial 3: What Are Objects?","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"From this project tutorial you will:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Clearly understand how to use Object types to create an animation\nBe able to create more complex animations\nDisplay meaningful information on your animations","category":"page"},{"location":"tutorials/tutorial_3/#Setting-Up-Our-Animation","page":"Tutorial 3: What Are Objects?","title":"Setting Up Our Animation","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"As demonstrated in prior tutorials, we will use Javis to create a Video object:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"using Javis\n\nvideo = Video(500, 500)","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Let's define our background function to create the backdrop of our frames:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"function ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"If we were to execute the render command now, this is what would appear as an output of the following execution:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"video = Video(500, 500)\nanim_background = Background(1:10, ground)\nrender(video, pathname = \"eeg.gif\", framerate = 1)","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"As you can see, we have generated a blank gif. Not exactly what we want but it is a start! We used a special type of object called Background. This applies whatever function that is provided to it as the default background of any future animations produced by a future object.","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"NOTE: For this animation, we will be using a framerate of 1 frame per second. Thus, why framerate is set to the value of 1 in render.","category":"page"},{"location":"tutorials/tutorial_3/#Getting-A-*head*","page":"Tutorial 3: What Are Objects?","title":"Getting A - head","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Now that we have created our default background via the Background, let's move onto making the head that we will attach our electrodes to!","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"First, we define an additional function that allows us to draw a circle. This will be used extensively later:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"function circ(p = O, color = \"black\", action = :fill, radius = 25, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    circle(p, radius, action)\nend","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"We can now do the exciting part – using an Object! Objects are at the very heart of the entire Javis library and are the foundational building blocks to make animations. Objects are what is used to draw on a frame!","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Using the circ function we defined, we can use an Object to draw a head. The following invocation will create the head:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"...\nhead = Object((args...) -> circ(O, \"black\", :stroke, 170))\n...","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"An Object consists of at least one part, namely calling a function which draws something on to the canvas.  Objects are comprised of Frames (which can be optionally defined), a drawing function func, and an optional Animation (this functionality is explained more in future tutorials).","category":"page"},{"location":"tutorials/tutorial_3/#Frames","page":"Tutorial 3: What Are Objects?","title":"Frames","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"The default of an Object is to use the same frames as a previous Object.  Besides that there are three other options:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Define the range explicitly i.e. 1:100.\nUse the default or explicitly write :same into the unit range location which means the same frames as before\nUse RFrames to specify it relative to the previously defined frame range\nRFrames(10) which is short for RFrames(1:10) after an Object which is defined for 1:100 would mean 101:110.\nYou just want to make sure that you don't define a frame range greater than the frame range defined for Background.","category":"page"},{"location":"tutorials/tutorial_3/#Function","page":"Tutorial 3: What Are Objects?","title":"Function","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"The most important part of each Object is the drawing function func that defines what should be drawn in these frames.  Under the hood, Javis calls func with three arguments (video, object, and framenumber) but you do not need to preoccupy yourself with these. Just make func an anonymous function and define the output being drawn in the canvas:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"(args...) -> my_drawing_function(my_drawing_arguments...)","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"(The args... don't even need to be part of the output!)","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"In Tutorial 1, we saw that my_drawing_function could either be a Luxor function or a function which calls some Luxor functions to draw on the canvas. ","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Now that those explanations are out of the way, back to the brain! ","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"The code","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"...\nhead = Object((args...) -> circ(O, \"black\", :stroke, 170))\n...","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"creates","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Now we are getting a - head! 😃","category":"page"},{"location":"tutorials/tutorial_3/#Placing-the-Electrodes","page":"Tutorial 3: What Are Objects?","title":"Placing the Electrodes","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"To draw our electrodes, it would be useful to have a frame of reference for where the electrodes are supposed to go. Let's draw some axes for our electrode locations!","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"We will need to define a new function that allows us to draw lines. This is accomplished by the following function definition:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"function draw_line(p1 = O, p2 = O, color = \"black\", action = :stroke, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    line(p1, p2, action)\nend","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Now, we can add in some grid lines for our electrode array.  The following code places a vertical and horizontal axis as well as an inscribed circle to represent polar placement of the electrodes:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"...\ninside_circle = Object((args...) -> circ(O, \"black\", :stroke, 140, \"longdashed\"))\nvert_line = Object(\n    (args...) ->\n        draw_line(Point(0, -170), Point(0, 170), \"black\", :stroke, \"longdashed\"),\n)\nhoriz_line = Object(\n    (args...) ->\n        draw_line(Point(-170, 0), Point(170, 0), \"black\", :stroke, \"longdashed\"),\n)\n...","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Great! Now that we have the gridlines, let's add in our electrodes!","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"We have to define our own function to create an electrode. The following code accomplishes this goal:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"function electrode(\n    p = O,\n    fill_color = \"white\",\n    outline_color = \"black\",\n    action = :fill,\n    radius = 25,\n    circ_text = \"\",\n)\n    sethue(fill_color)\n    circle(p, radius, :fill)\n    sethue(outline_color)\n    circle(p, radius, :stroke)\n    text(circ_text, p, valign = :middle, halign = :center)\nend","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Essentially, all the electrode function does is draws two circles on top of each other. One circle creates a white circle for the backdrop of text provided to it and the other circle provides a black outline. ","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"From there, we need to position our electrodes! I already went through and created a named tuple which defines an electrode's name and its position. ","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Go ahead and copy this to save yourself the time to place these perfectly. I already did this for you - aren't I great? 😉","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"electrodes_list = [\n    (name = \"Cz\", position = O),\n    (name = \"C3\", position = Point(-70, 0)),\n    (name = \"C4\", position = Point(70, 0)),\n    (name = \"T3\", position = Point(-140, 0)),\n    (name = \"T4\", position = Point(140, 0)),\n    (name = \"Pz\", position = Point(0, 70)),\n    (name = \"P3\", position = Point(-50, 70)),\n    (name = \"P4\", position = Point(50, 70)),\n    (name = \"Fz\", position = Point(0, -70)),\n    (name = \"F3\", position = Point(-50, -70)),\n    (name = \"F4\", position = Point(50, -70)),\n    (name = \"F8\", position = Point(115, -80)),\n    (name = \"F7\", position = Point(-115, -80)),\n    (name = \"T6\", position = Point(115, 80)),\n    (name = \"T5\", position = Point(-115, 80)),\n    (name = \"Fp2\", position = Point(40, -135)),\n    (name = \"Fp1\", position = Point(-40, -135)),\n    (name = \"A1\", position = Point(-190, -10)),\n    (name = \"A2\", position = Point(190, -10)),\n    (name = \"O1\", position = Point(-40, 135)),\n    (name = \"O2\", position = Point(40, 135)),\n]","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Finally, we can broadcast these points and names to our previously defined electrode function. Also, we need to define the radius of our electrodes; we will set that to 15:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"...\nradius = 15 # Radius of the electrodes\nfor num in 1:length(electrodes_list)\n    Object(\n        (args...) ->\n            electrode.(\n                electrodes_list[num].position,\n                \"white\",\n                \"black\",\n                :fill,\n                radius,\n                electrodes_list[num].name,\n            ),\n    )\nend\n...","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Now, executing this code block with our previously defined functions, we get this output:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_3/#\"If-Only-I-Had-a-Brain...\"","page":"Tutorial 3: What Are Objects?","title":"\"If Only I Had a Brain...\" 🎵","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"I think this is starting to come together quite nicely! It would appear that our subject however has no brain activity - quite alarming! 😱 Like the scarecrow from the film, The Wizard of Oz, let's give him a brain!","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"To simulate brain activity, we are going to add one more package from Julia base. This package is the Random package and it needs to be added like such:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"using Javis\nusing Random","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"From there, we need to define colors to represent no, low, medium, and high brain activity. Feel free to change up the colors! I chose these colors that need to be added to your code:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"indicators = [\"white\", \"gold1\", \"darkolivegreen1\", \"tomato\"]","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"From there, we also need to change the code block that defined the electrode locations. The previous electrode code looked like this","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"...\nfor num in 1:length(electrodes_list)\n    Object(\n        (args...) ->\n            electrode.(\n                electrodes_list[num].position,\n                rand(indicators, length(electrodes_list)),\n                \"black\",\n                :fill,\n                radius,\n                electrodes_list[num].name,\n            ),\n    )\nend\n...","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"However, what we now need to change is \"white\" to rand(indicators, length(electrodes_list)) for each electrode. The rand function allows proper broadcasting such that a new color is chosen for each electrode between frames. Without having the length(electrodes_list) random colors would be generated but only for the first frame. The next frame would then keep these colors for the rest of the animation.","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"An example resulting electrode configuration with random colors looks like this:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"...\nfor num in 1:length(electrodes_list)\n    Object(\n        (args...) ->\n            electrode.(\n                electrodes_list[num].position,\n                rand(indicators, length(electrodes_list)),\n                \"black\",\n                :fill,\n                radius,\n                electrodes_list[num].name,\n            ),\n    )\nend\n...","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Once all these modifications were made, execute your EEG and you should get something that looks like this:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"IT'S ALIVE!!! 🔬 We could finish this now, but let's add just a little bit more polish to it.","category":"page"},{"location":"tutorials/tutorial_3/#As-You-Can-See-Here...","page":"Tutorial 3: What Are Objects?","title":"As You Can See Here...","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Let's add some information to our animation.  We can create an info box using the following function:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"function info_box(video, object, frame)\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    text(\"10-20 EEG Array Readings\", 140, -220, valign = :middle, halign = :center)\n    text(\"t = $(frame)s\", 140, -200, valign = :middle, halign = :center)\nend","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"It's invocation in the code looks like this:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"...\ninfo = Object(info_box)\n...","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"NOTE: The function for info_box is a little different! Each Object receives three additional variables being a Video object, which was previously defined outside of the render function, an Object, and the current frame number. ","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Once everything is executed, we get this very nice and clean looking animation which shows what this animation is and when parts of the brain are activated:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_3/#Conclusion","page":"Tutorial 3: What Are Objects?","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Congratulations! 🎉 🎉 🎉  You made a brain!  To recap, by working through this animation you should now:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Clearly understand how to use an Object \nBe able to create your own Object\nKnow how to approach complex animations\nMake meaningful information displayed easily on your animations","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Great job leveling up your Javis skills! 💪","category":"page"},{"location":"tutorials/tutorial_3/#Full-Code","page":"Tutorial 3: What Are Objects?","title":"Full Code","text":"","category":"section"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"In case you ran into any issues or confusion, here is the full code:","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"using Javis\nusing Random\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction draw_line(p1 = O, p2 = O, color = \"black\", action = :stroke, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    line(p1, p2, action)\nend\n\nfunction circ(p = O, color = \"black\", action = :fill, radius = 25, edge = \"solid\")\n    sethue(color)\n    setdash(edge)\n    circle(p, radius, action)\nend\n\nfunction info_box(video, object, frame)\n    fontsize(12)\n    box(140, -210, 170, 40, :stroke)\n    text(\"10-20 EEG Array Readings\", 140, -220, valign = :middle, halign = :center)\n    text(\"t = $(frame)s\", 140, -200, valign = :middle, halign = :center)\nend\n\nfunction electrode(\n    p = O,\n    fill_color = \"white\",\n    outline_color = \"black\",\n    action = :fill,\n    radius = 25,\n    circ_text = \"\",\n)\n    sethue(fill_color)\n    circle(p, radius, :fill)\n    sethue(outline_color)\n    circle(p, radius, :stroke)\n    text(circ_text, p, valign = :middle, halign = :center)\nend\n\nelectrodes_list = [\n    (name = \"Cz\", position = O),\n    (name = \"C3\", position = Point(-70, 0)),\n    (name = \"C4\", position = Point(70, 0)),\n    (name = \"T3\", position = Point(-140, 0)),\n    (name = \"T4\", position = Point(140, 0)),\n    (name = \"Pz\", position = Point(0, 70)),\n    (name = \"P3\", position = Point(-50, 70)),\n    (name = \"P4\", position = Point(50, 70)),\n    (name = \"Fz\", position = Point(0, -70)),\n    (name = \"F3\", position = Point(-50, -70)),\n    (name = \"F4\", position = Point(50, -70)),\n    (name = \"F8\", position = Point(115, -80)),\n    (name = \"F7\", position = Point(-115, -80)),\n    (name = \"T6\", position = Point(115, 80)),\n    (name = \"T5\", position = Point(-115, 80)),\n    (name = \"Fp2\", position = Point(40, -135)),\n    (name = \"Fp1\", position = Point(-40, -135)),\n    (name = \"A1\", position = Point(-190, -10)),\n    (name = \"A2\", position = Point(190, -10)),\n    (name = \"O1\", position = Point(-40, 135)),\n    (name = \"O2\", position = Point(40, 135)),\n]\n\nradius = 15\nindicators = [\"white\", \"gold1\", \"darkolivegreen1\", \"tomato\"]\ndemo = Video(500, 500)\n\nanim_background = Background(1:10, ground)\nhead = Object((args...) -> circ(O, \"black\", :stroke, 170))\ninside_circle = Object((args...) -> circ(O, \"black\", :stroke, 140, \"longdashed\"))\nvert_line = Object(\n    (args...) ->\n        draw_line(Point(0, -170), Point(0, 170), \"black\", :stroke, \"longdashed\"),\n)\nhoriz_line = Object(\n    (args...) ->\n        draw_line(Point(-170, 0), Point(170, 0), \"black\", :stroke, \"longdashed\"),\n)\n\nfor num in 1:length(electrodes_list)\n    Object(\n        (args...) ->\n            electrode.(\n                electrodes_list[num].position,\n                rand(indicators, length(electrodes_list)),\n                \"black\",\n                :fill,\n                radius,\n                electrodes_list[num].name,\n            ),\n    )\nend\ninfo = Object(info_box)\n\nrender(demo, pathname = \"eeg.gif\", framerate = 1)","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"","category":"page"},{"location":"tutorials/tutorial_3/","page":"Tutorial 3: What Are Objects?","title":"Tutorial 3: What Are Objects?","text":"Author(s): Jacob Zelko, Ole Kröger \nDate: August 11th, 2020 \nTag(s): brain, EEG, project, tutorial, electrodes, Object, Background","category":"page"},{"location":"tutorials/tutorial_5/#**Tutorial-5:**-Do-You-Know-Our-Mascot?-Learn-About-Transitions-And-Actions!","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"You have learned a couple of cool features of Javis already.  Now you're ready to finally meet our little mascot.  Well actually you can't see him just yet - we have to create him first. 😄","category":"page"},{"location":"tutorials/tutorial_5/#Our-goal","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Our goal","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Let's create a list of what we want first:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"a circular head\nsome hair\neyes\na nose\na moving mouth\nhe should say something","category":"page"},{"location":"tutorials/tutorial_5/#Learning-Outcomes","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"This tutorial demonstrates the power of actions a bit more than the previous tutorials. An Action can be used to finely manipulate objects in your animation or visualization. ","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"From this tutorial, you will learn how to:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Finely control objects by making them appear and disappear using an Action.\nMove objects using an Action.\nLearn how to create several objects quickly","category":"page"},{"location":"tutorials/tutorial_5/#Starting-with-the-Basics-of-Action","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Starting with the Basics of Action","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"The ground function should be familiar to you as well as the general structure of the code if you have seen the first tutorial. In this tutorial, rather than calling the render function in the global space, we are going to be calling it from the function we are creating to create our mascot, face: ","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"using Javis\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction title(args...)\n    fontsize(20)\n    text(\"Our Mascot\", Point(0, -200),\n        valign=:middle, halign=:center)\nend\n\nfunction face()\n    video = Video(500, 500)\n    Background(1:150, ground)\n    the_title = Object(title)\n    act!(the_title, Action(1:5, appear(:fade)))\n    render(video; pathname=\"jarvis.gif\", framerate=15)\nend","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"NOTE: For an Object you can leave the frames arg blank.  The frames from the previous action are used. ","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"A function of an Action is normally either appear or disappear or one of these transformations: anim_translate, anim_rotate/anim_rotate_around and anim_scale.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"In theory you can define your own but that is way outside of this tutorial.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Let's summarize the functionality:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"We have created a Background as usual and an Object with the same number of frames.  The object is saved in a variable the_title such that we can act! on it with an Action. In this case we let the title fade in for the first five frames.","category":"page"},{"location":"tutorials/tutorial_5/#The-Upper-Part-of-the-Head","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"The Upper Part of the Head","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Let's continue with a bit more before we draw part of the mascot.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"The following actions will be added below the last action.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"head = Object(16:150, (args...)->circle(O, 100, :stroke))\nact!(head, Action(1:15, appear(:fade)))","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"This is very similar to the previous code. Here we can see that the Action uses relative frame numbers such that the head appears in the frames 16:30 and then is at full opacity afterwards.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"NOTE: Just a small refresher: We need the anonymous function (args...)->circle(O, 100, :stroke) as each function gets called with the three arguments video, action, frame.","category":"page"},{"location":"tutorials/tutorial_5/#Javis-Regrows-Hair!","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Javis Regrows Hair!","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Jarvis is bald currently! Okay let's add some hair shall we?","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"I want to have some randomness in his hair so let's define:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"hair_angle = rand(-0.9:0.1:0.9, 20)","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"at the beginning of the face function.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"and have a hair function:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"function hair_blob(angle)\n    sethue(\"brown\")\n    rotate(angle)\n    circle(Point(0, -100), 20, :fill)\nend","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"It draws one brown hair blob given the angle. We basically rotate the whole canvas and then draw the circle always at the same local position. ","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Now how do we draw the hair without creating an action for each blob?","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Well we actually create an Action for each blob but only internally. You can use the act! function.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"hair = Object[]\nfor i = 1:20\n    push!(hair, Object(26:150, (args...)->hair_blob(hair_angle[i])))\nend\nact!(hair, Action(1:25, appear(:fade)))","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"We first create a vector where we define that its a vector of Object and then push new objects to it. Afterwards we can apply an action to the whole group.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"I think you get the idea of how to use appear now. Let's add some eyes and a nose quickly before we draw our first gif.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"the_eyes = Object(30:150, (args...)->eyes(eye_centers, 10, \"darkblue\"))\nact!(the_eyes, Action(1:15, appear(:fade)))\n\nthe_nose = Object(45:150, (args...)->poly(nose, :fill))\nact!(the_nose, Action(1:15, appear(:fade)))","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"with:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"eye_centers = [Point(-40,-30), Point(40,-30)]\nnose = [O, Point(-10,20), Point(10, 20), O]","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"and","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"function eyes(centers, radius, color)\n    sethue(color)\n    circle.(centers, radius, :fill)\n    setcolor(\"white\")\n    circle.(centers, radius/5, :fill)\nend","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"(Image: Up to the nose)","category":"page"},{"location":"tutorials/tutorial_5/#Talk-to-Me,-Jarvis","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Talk to Me, Jarvis","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Let's give him some moving lips so he can communicate with us:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"upper_lip = [Point(-40, 45), Point(40, 45)]\nlower_lip = [Point(-40, 55), Point(40, 55)]","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"These are just the outer points of the lips:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"function lip(p1, p2)\n    setline(2)\n    move(p1)\n    c1 = p1 + Point(10, 10)\n    c2 = p2 + Point(-10, 10)\n    curve(c1, c2, p2)\n    do_action(:stroke)\nend","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"This function uses some more functions of the awesome Luxor package.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"The lips should be a little thicker than the other lines that we have drawn so far so let's set setline(2) (default is 1). First we move to the starting point of the lip and create two control points a bit below and to the vertical center.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"The curve function is used to draw a cubic Bézier curve.  It unfortunately doesn't support the :stroke at the end so we have to do this with do_action(:stroke) this time.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Now our two actions:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"lip_fade_in = Action(1:15, appear(:fade))\nthe_upper_lip = Object(60:150, (args...)->lip(upper_lip...))\nact!(the_upper_lip, lip_fade_in)\nact!(the_upper_lip, [Action(20i:20i+10, anim_translate(0, -5)) for i in 1:5])\nact!(the_upper_lip, [Action(20i+10:20i+20, anim_translate(0, 5)) for i in 1:5])\n\nthe_lower_lip = Object(60:150, (args...)->lip(lower_lip...))\nact!(the_lower_lip, lip_fade_in)\nact!(the_lower_lip, [Action(20i:20i+10, anim_translate(0, 5)) for i in 1:5])\nact!(the_lower_lip, [Action(20i+10:20i+20, anim_translate(0, -5)) for i in 1:5])","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"We fade them in at the beginning and then they shall move up and down a couple of times.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"In this snippet you can see that we can define a more general action which isn't applied to an object at the stage of creation. You can also use the act! function to apply a list of actions to an object like. ","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Finally let him speak:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"function speak(str)\n    fontsize(15)\n    text(str, Point(100, 50))\nend","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"speaking1 = Object(80:120, (args...)->speak(\"I'm Jarvis\"))\nact!(speaking1, Action(1:5, appear(:draw_text)))\nact!(speaking1, Action(36:40, disappear(:draw_text)))\n\nspeaking2 = Object(120:150, (args...)->speak(\"How are you?\"))\nact!(speaking2, Action(1:5, appear(:draw_text)))\nact!(speaking2, Action(36:40, disappear(:draw_text)))  ","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"This time we also use the disappear function to fade out the text. Additionally, it shows you a new input into appear and disappear which only works for text namely :draw_text which draws the text from left to right.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Now, with everything properly defined within the face function one can simply execute the following from your Julia REPL:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"julia> face()","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"To produce the following:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"(Image: Jarvis)","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Jarvis is alive! ","category":"page"},{"location":"tutorials/tutorial_5/#Conclusion","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"To recap, by working through this animation you should now:","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Understand how to make objects appear and disappear using actions\nBe able to move objects inside actions to have a finer control of the movement\nKnow how to use apply several actions to an object","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Hope you had as much fun reading this tutorial as I had creating our mascot.","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"You're now ready to create your own big project.","category":"page"},{"location":"tutorials/tutorial_5/#The-Code","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"The Code","text":"","category":"section"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"using Javis\n\nfunction ground(args...)\n    background(\"white\")\n    sethue(\"black\")\nend\n\nfunction title(args...)\n    fontsize(20)\n    text(\"Our Mascot\", Point(0, -200),\n        valign=:middle, halign=:center)\nend\n\nfunction hair_blob(angle)\n    sethue(\"brown\")\n    rotate(angle)\n    circle(Point(0, -100), 20, :fill)\nend\n\nfunction eyes(centers, radius, color)\n    sethue(color)\n    circle.(centers, radius, :fill)\n    setcolor(\"white\")\n    circle.(centers, radius/5, :fill)\nend\n\nfunction lip(p1, p2)\n    setline(2)\n    move(p1)\n    c1 = p1 + Point(10, 10)\n    c2 = p2 + Point(-10, 10)\n    curve(c1, c2, p2)\n    do_action(:stroke)\nend\n\nfunction speak(str)\n    fontsize(15)\n    text(str, Point(100, 50))\nend\n\nfunction face()\n    eye_centers = [Point(-40,-30), Point(40,-30)]\n    nose = [O, Point(-10,20), Point(10, 20), O]\n    upper_lip = [Point(-40, 45), Point(40, 45)]\n    lower_lip = [Point(-40, 55), Point(40, 55)]\n    hair_angle = rand(-0.9:0.1:0.9, 20)\n\n    video = Video(500, 500)\n    Background(1:150, ground)\n    the_title = Object(title)\n    act!(the_title, Action(1:5, appear(:fade)))\n    a = Object(16:150, (args...)->circle(O, 100, :stroke))\n    act!(a, Action(1:15, appear(:fade)))\n    \n    hair = Object[]\n    for i = 1:20\n        push!(hair, Object(26:150, (args...)->hair_blob(hair_angle[i])))\n    end\n    act!(hair, Action(1:25, appear(:fade)))\n    \n    the_eyes = Object(30:150, (args...)->eyes(eye_centers, 10, \"darkblue\"))\n    act!(the_eyes, Action(1:15, appear(:fade)))\n\n    the_nose = Object(45:150, (args...)->poly(nose, :fill))\n    act!(the_nose, Action(1:15, appear(:fade)))\n    \n    lip_fade_in = Action(1:15, appear(:fade))\n    the_upper_lip = Object(60:150, (args...)->lip(upper_lip...))\n    act!(the_upper_lip, lip_fade_in)\n    act!(the_upper_lip, [Action(20i:20i+10, anim_translate(0, -5)) for i in 1:5])\n    act!(the_upper_lip, [Action(20i+10:20i+20, anim_translate(0, 5)) for i in 1:5])\n\n    the_lower_lip = Object(60:150, (args...)->lip(lower_lip...))\n    act!(the_lower_lip, lip_fade_in)\n    act!(the_lower_lip, [Action(20i:20i+10, anim_translate(0, 5)) for i in 1:5])\n    act!(the_lower_lip, [Action(20i+10:20i+20, anim_translate(0, -5)) for i in 1:5])\n\n    speaking1 = Object(80:120, (args...)->speak(\"I'm Jarvis\"))\n    act!(speaking1, Action(1:5, appear(:draw_text)))\n    act!(speaking1, Action(36:40, disappear(:draw_text)))\n\n    speaking2 = Object(120:150, (args...)->speak(\"How are you?\"))\n    act!(speaking2, Action(1:5, appear(:draw_text)))\n    act!(speaking2, Action(36:40, disappear(:draw_text)))    \n    render(video; pathname=\"jarvis.gif\", framerate=15)\nend\n\nface()","category":"page"},{"location":"tutorials/tutorial_5/","page":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","title":"Tutorial 5: Do You Know Our Mascot? - Learn About Transitions And Actions!","text":"Author(s): Ole Kröger, Jacob Zelko \nDate: August 14th, 2020 \nTag(s): jarvis, actions, fade, transformations","category":"page"},{"location":"tutorials/tutorial_morphing/#**Tutorial-9:**-Morphing-Javis-Objects","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"","category":"section"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"There are multiple ways to morph an object in Javis.","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Using morph_to(::Object) method. Any Object can be morphed to any other object using this method.\nUsing morph_to(::Function) method. Similar to morph_to(::Object) but morphs to a function instead. Can morph an object to a function that contains Luxor calls to draw what it should morphed into.\nSpecifying an Action with an  Animation along with morph() to make keyframed morphings. This helps making and timing a sequence of morph animations easier.","category":"page"},{"location":"tutorials/tutorial_morphing/#Morphing-one-object-to-another.","page":"Tutorial 9: Morphing Javis Objects","title":"Morphing one object to another.","text":"","category":"section"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Like other animations morph_to(::Object) is to be used with action. To learn more about Actions refer to Tutorial 5. Here is a simple code snippet on how to use morph_to...","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"using Javis\n\nvideo = Video(500,500)\nnframes = 160 \n\nfunction circdraw(color)\n    sethue(color)\n    setopacity(0.5)\n    circle(O,100,:fillpreserve)\n    setopacity(1.0)\n    sethue(\"white\")\n    strokepath()\nend\n\nfunction boxdraw(color)\n    sethue(color)\n    box(O,100,100,:fillpreserve)\n    setopacity(1.0)\n    sethue(\"white\")\n    strokepath()\nend\nBackground(1:nframes,(args...)->background(\"black\"))\nboxobj  = Object((v,o,f) -> boxdraw(\"green\"))\ncircobj = Object((v,o,f) -> circdraw(\"red\"))\n\ntransform_to_box = Action(20:nframes-20, morph_to(boxobj))\nact!(circobj, transform_to_box)\nrender(video,pathname=\"circ_to_box.gif\")","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"If you aren't familiar with this syntax (v,o,f)-> circdraw(\"red\") its an \"anonymous\" function or sometimes called a lambda function. Basically a nameless function that is written on the spot in that line of code . One might as well use any other function func in place of it (which takes at least 3 arguments video,object,frame). Elsewhere in the docs/tutorials you will come across something of the form Object( (args...) -> (\"some code here\") ). This is slurping and is similar to packing *args in python. ","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"We created two objects circobj and boxobj . circobj ofcourse is a circle because its drawing function (v,o,f) -> circdraw(\"red\") draws a circle, with a color=red, filling at 0.5 opacity, and then makes a white outline (stroke).  boxobj's function draws an opaque green box, with white outline.","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"This Object function is called repeatedly at render-time at every frame that the object exists to draw this object. The appropriate video,object, and frame are passed to this function at render time. Javis then has other tricks up its sleeve to scale/move/morph whats going to be drawn depending on the frame and object to effect out animations through Actions. This is roughly the idea behind Javis's Object-Action mechanism","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"We defined a transform_to_box Action which runs from frame 20 to lastframe-20 . The Action morphs whatever object its acted upon, into what looks like boxobj. Note that boxobj and circobj are separate objects all the time, even after the Action (it just happens that they overlap each other). As the Action keeps getting applied at render time frame by frame, the \"drawing\" of circobj starts to look like boxobj's drawing.","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"The Action is applied to the circobj with the act! function.","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Note that the boxobj is present throughout as the circobj is morphing. If you want to hide it you can set its opacity to 0 with another action (to make it disappear) and set its frames to be drawn for 1 frame only (for efficiency).","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Background(1:nframes,(args...)->background(\"black\"))\nboxobj = Object(1:1 , (args...) -> boxdraw(\"green\") )\ncircobj = Object(1:nframes,(args...) -> circdraw(\"red\"))\n\ntransform_to_box = Action(20:nframes-20, morph_to(boxobj))\nhide_action = Action(1:1, (args...)->setopacity(0.0) )\n\nact!(circobj, transform_to_box)\nact!(boxobj, hide_action)\n\nrender(video,pathname=\"circ_to_box_hidden.gif\")","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"However you can directly specify a shape an object has to morph to without making an Object using morph_to(f::Function) i.e passing a function as an argument.","category":"page"},{"location":"tutorials/tutorial_morphing/#Morphing-an-Object-using-a-Function","page":"Tutorial 9: Morphing Javis Objects","title":"Morphing an Object using a Function","text":"","category":"section"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Background(1:nframes,(args...)->background(\"black\"))\n#boxobj = Object(1:1 , (args...) -> boxdraw(\"green\") )\ncircobj = Object(1:nframes,(args...) -> circdraw(\"red\"))\n\ntransform_to_box = Action(20:nframes-20, morph_to(boxdraw,[\"blue\"]))\n#hide_action = Action(1:1, (args...)->setopacity(0.0) )\n\nact!(circobj, transform_to_box)\n#act!(boxobj, hide_action)\n\nrender(video,pathname=\"circ_to_box_func.gif\")","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Here we have morphed  the circle  without defining an object to morph to. Rather the shape it has to morph into is given by a Function. The general syntax is morph_to(fn::Function,args::Array=[]) . args is an array of arguments that is to be passed to the function. Here we morph circobj to a shape  that would is  drawn by boxdraw(\"blue\"). Morphed Objects can be furthur morphed into other shapes by carrying out another Action further in the timeline.  ","category":"page"},{"location":"tutorials/tutorial_morphing/#Keyframed-morphs-using-Animations.jl","page":"Tutorial 9: Morphing Javis Objects","title":"Keyframed morphs using Animations.jl","text":"","category":"section"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Another mechanism for morphing is by passing morph() to Action along with an Animation For a tutorial on how to use Animations.jl look at Tutorial 7,","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"using Javis\nusing Animations\nvideo = Video(500,500)\nnframes = 160 \n\nfunction circdraw(color)\n    sethue(color)\n    setopacity(0.5)\n    circle(O,50,:fillpreserve)\n    setopacity(1.0)\n    sethue(\"white\")\n    strokepath()\nend\n\nfunction boxdraw(color)\n    sethue(color)\n    box(O,100,100,:fillpreserve)\n    setopacity(1.0)\n    sethue(\"white\")\n    strokepath()\nend\n\nfunction stardraw()\n    sethue(\"white\")\n    star(O,100,5,0.5,0.0,:stroke)\nend\n\nBackground(1:nframes+10,(args...)->background(\"black\"))\nboxobj = Object(1:nframes+10 , (args...) -> boxdraw(\"green\") )\n\nanim = Animation([0,1],MorphFunction[(boxdraw,[\"green\"]),(circdraw,[\"red\"])] )\n\naction = Action(1:nframes,anim,morph())\nact!(boxobj,action)\nrender(video,pathname=\"box_to_circ_hidden.gif\")","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Take a look at anim. It is of type Animation. First lets look at a simpler instance of Animation.","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Ex:1\nAnimation([0,1],[2,4])","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Think of Animations like  a \"map\" or a \"function\" (in the math sense) thats maps values from its first argument ([0,1] above) to another set of values ([2,4]) . This means that 0 gets mapped to 2 and 1 gets mapped to 4 and all values inbetween are linearly interpolated. Another Example","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Ex:2\nAnimation([0,0.3,1],[3,4.5,7])","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"This animation maps 0 to 3 , 0.3 -> 4.5 and 1->7. And all values inbetween are linear interpolations. ","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Take a look at the Animations.jl package for an indepth explanation on how to have different interpolations to make your animations look way cooler. ( for example the sineio interpolaation is slow at first speeds up in between and gradually slows to a halt )","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"One can in principle provide values beyond 0 and 1 for the first argument however Javis requires Animation objects to have the first argument to be from 0 to 1. This Animation object is passed to an Action, and Javis interprets 0 to be the first frame of the Action and 1 to be the final frame of the Action.","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"In the big code snippet above we can see that the second array passed to Animation is an array of MorphFunctions. MorphFunction is a struct . This struct has 2 fields. The fields are func and args. These arguments are used to specify drawing functions and the arguments to be passed to them , The Array of MorphFunction passed to the Animation  defines a sequence of shapes/drawings that the Object should be morphed into one by one in that order. Each shape/drawing is what would have been got by calling func(args...) of the respective MorphFunction. In the example above there are only two in shapes in the sequence a green box and a red circle (boxdraw(\"green\") and circdraw(\"red\")). Typically the first MorphFunction should draw the same thing that Object is.  ","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"The general idea of whats going on is we are making an Animation that maps 0 (i.e the first frame of the action.) to MorphFunction(boxdraw,[\"green\"]) and 1 (last frame of the action) to MorphFunction(circdraw,[\"red\"]) and Javis handles the interpolation between them. ","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Thus we have made an  Animation  called anim. Then we made an action with this anim. We called it action . Then we applied the action on our object boxobj to get ... ","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"The way of morphing shines when you have to do multiple morphs in a sequence and with different timings. Lets look at another example taking object to morph box(initial shape) -> star -> circle in a sequence.","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Change the lines describing the animation to ","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"anim = Animation([0, 0.7, 1],MorphFunction[(boxdraw, [\"green\"]), (stardraw, []), (circdraw, [\"red\"])])","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"stardraw draws a white star without fill. The function does not take an argument and therefore the Tuple with stardraw should  have an empty Array at its second index. If your drawing functions do not take any arguments you can pass it as function itself, and need not wrap it in a Tuple.","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Ex. suppose mydraw1 , mydraw2 and  mydraw4 take a color as an argument but mydraw3 does not take any arguments.","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"anim = Animation([0, t1, t2, 1],MorphFunction[ (mydraw1,[\"red\"]), (mydraw2,[\"blue\"]), mydraw3, (mydraw4,[\"black\"]) ])","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"A third way to pass functions to morph into is to simply pass a function an its arguments in a Tuple","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"anim = Animation([0, t1, t2, 1],MorphFunction[ (mydraw1,\"red\"), (mydraw2,\"blue\"), mydraw3, (mydraw4,\"black\") ])","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"When passed this way the first element of the Tuple is taken to be the function and the subsequent elements are the arguments to be passed to the function.","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"What we see now is from the beginning to 0.7 fraction of the Action's frames it carries out the morphing from a boxdraw(\"green\") to stardraw().  And the remainder of the Action's frames it morphs from stardraw() to circdraw(\"red\"). Once again , do look up Animations.jl and Tutorial 7 to see how you pass easing functions to manipulate the timing of animations (for example ... initially slow - fast in the middle - slow in the end) .  Now you know a bit about Morphing . Remember just like any other Action you can stack morphing actions with other Actions (translations, scaling etc) to bring about effects you desire. ","category":"page"},{"location":"tutorials/tutorial_morphing/","page":"Tutorial 9: Morphing Javis Objects","title":"Tutorial 9: Morphing Javis Objects","text":"Author(s): John George Francis (@arbitrandomuser)  Date: May 28th, 2022 \nTag(s): action, morphing, object, animation","category":"page"},{"location":"tutorials/tutorial_partialdraw/#**Tutorial-10:**-Animating-Creation-of-Objects","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"","category":"section"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"A cool effect of bringing in Objects into your video/gif is to show it being drawn out incrementally from nothing. ","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"In this tutorial we'll take a look at how you can make these kind of animations","category":"page"},{"location":"tutorials/tutorial_partialdraw/#The-showcreation-function","page":"Tutorial 10: Animating Creation of Objects","title":"The showcreation function","text":"","category":"section"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"The general syntax to animate the creation of an object is ","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"action = Action(startframe:endframe, showcreation() )\nact!(obj, action)","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"This starts the creation of the object at startframe and the object is completely drawn when the timeline reaches endframe.","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"lets see this in example.","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"using Javis \nvideo = Video(500,500)\n\nBackground(1:120,(args...)->begin\n\tbackground(\"black\")\n\tsethue(\"white\")\nend)\ncirc = Object(1:120, (args...)-> circle(O,100,:stroke))\n\naction_showcreate = Action(1:60,showcreation())\nact!(circ,action_showcreate)\n\nrender(video,pathname=\"createcircle.gif\")","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"You should see a circle being created in your video. ( I've added in the frame numbers in the gif so that the beginning and end of the gif are easily identifiable ) ","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"What if we wanted to show the object being created at a later point in the timeline. Say we want it to be created at frame 30 and finish at frame 90. Thats simple! we change the frames that the Action works on . Change the line with action_showcreate in the above example to...","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"action_showcreate = Action(30:90, showcreation())","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"Oops! , Thats (probably) not what we wanted. (look at the frame numbers) . What happened was obj exists from frame 1 to 120. But the show creation acts on it from 30 to 90. So the object exists from frame 1 to 30 as it is . Then its creation is animated from 30 to 90 and from 90 to 120 it remains as such.","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"One way to mitigate this is to change the frames obj exists. Make this change in the code above","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"circ = Object(30:120, (args...)->circle(O,100,:stroke))","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"Somethings still wrong!. One thing we forgot is the frames you mention in Action are  the frames relative to the Objects existence. So what happened now is the object is put on the scene from frame 30 onwards. The action acts on it from frame 30 relative to when the object was put. So 30+30 i.e 60 is the frame at which action starts. Can you fix this ? ","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"action_showcreate = Action(1:60,showcreation())","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"There we go ! It turned out we dont need to change the frames of the action, but the frames of the Object.  Hopefully by intentionally showing you a wrong way to do it you understood the working of  Actions a little better.","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"Another way is to have the object present throughout the video and to \"hide\" it initially till it is to be shown, with an action that sets the objects opacity to 0. ","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"There exists a similar function showdestruction() which does exactly the opposite of showcreation().","category":"page"},{"location":"tutorials/tutorial_partialdraw/","page":"Tutorial 10: Animating Creation of Objects","title":"Tutorial 10: Animating Creation of Objects","text":"Author(s): John George Francis (@arbitrandomuser)  Date: May 28th, 2022 \nTag(s): action, morphing, object, animation","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Aside from tutorials which take you step by step on how to create a tutorial, we also felt that it useful to show additional examples on things you can make with Javis! These animations do not have an accompanying tutorial but rather, scripts that you can examine, tweak, and modify to suit your own purposes. If you have an interesting example that you would like to share with us, open a PR (check out our Contributing Guide on how to do this) and we'd be happy to add your example to this page!","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Example Link Details\n(Image: Follow path) Follow a Path This creates a bezier curve to draw the outline of a car and have a circle go around that outlined path. follow_path, makebezierpath, and appear were used to create this animation.\n(Image: Julia logo using fourier series) Draw the Julia Logo Drawing the Julia logo using Fourier series approximation. It uses the libraries FFTW, FFTViews and TravelingSalesmanHeuristics. Inspired by ric-cioffi\n(Image: Projection of a rotating point) Project a rotating point Creates a rotating point and its projection on the positive orthant. Inspired by matbesancon\n(Image: Cosmic dance of earth and venus) Earth Venus Cosmic Dance This creates a beautiful animation of the cosmic dance of Earth and Venus giving rise to the 5 petals. Contributed by Ved Mahajan\n(Image: ODE visualization) Escaping the swirling vortex This shows the vector field of a nonautonomous ODE for which the eigenvalues of the jacobian have negative real part but the origin is unstable, so the nonstationary solutions \"escape the swirling vortex\". The system of ODEs is credited to L. Markus and H. Yamabe (1960). Contributed by Ricardo M. S. Rosa\n(Image: Galton board) Galton Board This shows a visualisation of the Galton Board, created by Francis Galton, that is used demonstrate the central limit theorem. Contributed by Enzio Kam.\n(Image: Central Limit Theorem) Cemtral Limit Theorem This shows a visualization of the convergence of the mean of IID variables to a Gaussian distribution. Contributed by gpucce.\n(Image: Gravities of the Solar System) Gravities of the Solar System Comparison of different gravities in the solar system. Inspired by @physicsJ animation here. Contributed by Anson Biggs\n(Image: Chaos Game) Chaos Game This draws an animation of the construction of a Sierpinski Fractal using the Chaos Game drawing method. Uses Luxor.jl's polygon methods and JLine. Contributed by razetime.","category":"page"},{"location":"#Welcome-to-the-Javis.jl-Docs!","page":"Home","title":"Welcome to the Javis.jl Docs! 🥳","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation is designed to provide greater detail into what Javis.jl is, its mission, and how to use it. These are its main components:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Mission and Vision of Javis.jl - this encapsulates our goals and vision for what this project is and what it could be. If you want to contribute to this project, please read this. \nTutorials - these tutorials are designed to help you learn how to use Javis.\nContributing - these are our guidelines for contributing. If you want to contribute to this project, please read this. \nReferences - this is an index of all available functions in the Javis.jl package. A great resource for working with Javis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For releases, we follow the semantic versioning protocol and enforce the BlueStyle code style format.","category":"page"},{"location":"#Installing-Javis.jl","page":"Home","title":"Installing Javis.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Javis into your Julia installation, type into your Julia REPL the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] add Javis","category":"page"},{"location":"","page":"Home","title":"Home","text":"That's all there is to it! 😃","category":"page"},{"location":"#Optional-Dependencies","page":"Home","title":"Optional Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you want LaTeX support, please use node to install the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"npm install -g mathjax-node-cli","category":"page"},{"location":"","page":"Home","title":"Home","text":"As of this moment, we do not have native LaTeX rendering in Julia. We look forward to the day when we can remove this from our documentation!","category":"page"},{"location":"","page":"Home","title":"Home","text":"What is also required is the great package, LaTeXStrings. Add that via your Julia REPL with the following commands:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] add LaTeXStrings","category":"page"},{"location":"tutorials/tutorial_1/#**Tutorial-1:**-Making-Your-First-Javis-Animation!","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"","category":"section"},{"location":"tutorials/tutorial_1/#Introduction","page":"Tutorial 1: Making Your First Javis Animation!","title":"Introduction","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"If you are reading this tutorial, I am going to assume this is the first time you are using Javis to create an animation.  In that case, welcome to Javis! 😃  By following this tutorial, we are going to make you a director of your very own animations written in pure Julia! 🎬 🎥","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"If you have not installed Javis yet, please visit the homepage to read the installation instructions.","category":"page"},{"location":"tutorials/tutorial_1/#Learning-Outcomes","page":"Tutorial 1: Making Your First Javis Animation!","title":"Learning Outcomes","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"In this tutorial you'll learn:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"What Javis.jl is.\nHow to make a basic animation using Object.\nMove objects created by Javis using Action.\nElements of Luxor.jl.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"By the end of this tutorial, you will have made the following animation:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"With all that said, let's dive into this tutorial! ✨","category":"page"},{"location":"tutorials/tutorial_1/#So...-What-Is-Javis.jl?","page":"Tutorial 1: Making Your First Javis Animation!","title":"So... What Is Javis.jl?","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Javis.jl is an abstraction on top of powerful graphics tools to make animations and visualizations easy to create. It is built on top of the fantastic Julia drawing packages, Luxor.jl and Cairo.jl. Cairo.jl is much too complex to explain here, but Luxor.jl gives one the ability to define and draw on a canvas. Luxor.jl provides simple functions like line, circle and poly by which one can make animations.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"WARNING: Please make sure not to use the Luxor package within scripts that use Javis!","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Do not write using Luxor in your Javis scripts or Julia REPL session as this will result in ambiguity errors. We make sure that every function you will need from Luxor can be accessed by writing using Javis 😉","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"NOTE: If you're interested in 2D graphics, you should definitely check out the awesome Luxor.jl package. It has a great tutorial that will give you an even greater understanding of how Javis.jl works.","category":"page"},{"location":"tutorials/tutorial_1/#Prerequisites","page":"Tutorial 1: Making Your First Javis Animation!","title":"Prerequisites","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"In order to use Javis, we will start with the following import:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"using Javis","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Then we need to define a Video ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"myvideo = Video(500,500) # 500 x 500 // width x height","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Every object and action that we create afterwards is added to myvideo.","category":"page"},{"location":"tutorials/tutorial_1/#Making-Our-Animation","page":"Tutorial 1: Making Your First Javis Animation!","title":"Making Our Animation","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"We need to set-up a few functions that will be able to make our animation! ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Our first function is the ground function. The ground function sets the background to white and the \"pen\" color to black. ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"function ground(args...) \n    background(\"white\") # canvas background\n    sethue(\"black\") # pen color\nend","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"NOTE: One may wonder, \"why is args... needed in the ground function?\" Each user-defined function gets three arguments video, object, and frame provided by Javis.   These arguments are defined below:video: Video struct\nobject: Object struct\nframe: the current frame numberAlthough these arguments are irrelevant for the ground function, we need to write args... such that Julia actually knows that we have a method that accepts those three arguments. The ... basically stands for as many arguments as you want.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Although Luxor.jl provides the functionality to draw circles, Javis does not.  We use Luxor.jl to create a function that defines a color for circles and draws the circles accordingly.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Here is how that code looks:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"function object(p=O, color=\"black\")\n    sethue(color)\n    circle(p, 25, :fill)\n    return p\nend","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"In general you can use all Luxor functions inside Javis. Javis is just an animation layer on top of it. We therefore highly recommend that you check out the awesome package Luxor.jl which has a nice newcomer tutorial. ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"The code snippet above defines a function which will be used to animate a circle in the next section. It takes in a point and a color as keyword arguments. ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"NOTE: You may notice in the object method, there is a kwarg called p, standing for the \"point\" of where to draw the object, which defaults to the letter O for origin.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"This is a shorthand provided by Luxor which is the same as Point(0, 0). If one wishes to be more explicit, one can define the function header as function object(p=Point(0,0), color=\"black\").","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Luxor has its default origin in the center of the canvas and the y-axis is pointing down.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"We finally draw a filled circle with a radius of 25 and return the point such that Javis can do some more magic. 🪄","category":"page"},{"location":"tutorials/tutorial_1/#Let's-Draw-a-Circle!","page":"Tutorial 1: Making Your First Javis Animation!","title":"Let's Draw a Circle!","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Using our newly found Javis knowledge, we can now draw a circle and render it! We do the following after importing the Javis.jl package and defining our own functions (don't worry if you don't understand the syntax here - it is too advanced for this tutorial but will be explained in future tutorials):","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"myvideo = Video(500, 500)\nBackground(1:70, ground)\nred_ball = Object(1:70, (args...) -> object(O, \"red\"), Point(100, 0))\n\nrender(\n    myvideo;\n    pathname=\"circle.gif\"\n)","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"We used Background instead of Object to specify that the ground function is applied to all objects afterwards. The Object functionality gives us the option to define the frames it applies to. Here, it is applied to frames 1 to 70, a function and a starting position.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"NOTE One may wonder why we don't use Point(100, 0) as the point given to the object function. The reason for this, is that it is often simpler to shift the original frame of reference to a new origin centered at the given point. As an example, functions like anim_scale always scale from the origin.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"You did it! 🎉 You created your first drawing with Javis! 🔴","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"The render command that you saw in the previous code snippet renders all the objects defined onto the Video object we defined (myvideo) and outputs it as a gif file.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"NOTE: Other formats are supported besides gif.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Check this out by running julia> ?render in your Julia REPL.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Let's go crazy and draw another object:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"myvideo = Video(500, 500)\nBackground(1:70, ground)\nred_ball = Object(1:70, (args...) -> object(O, \"red\"), Point(100,0))\nblue_ball = Object(1:70, (args...) -> object(O, \"blue\"), Point(200,80))\n\nrender(\n    myvideo;\n    pathname=\"circle.gif\"\n)","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"So, this drawing - it's all nice and all, but perhaps a little... Dull?  This is supposed to be an animation! Let's make these balls dance. 💃","category":"page"},{"location":"tutorials/tutorial_1/#It-Takes-Two-to-Tango","page":"Tutorial 1: Making Your First Javis Animation!","title":"It Takes Two to Tango 💃","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Let's use the function, anim_rotate_around, to produce a ball that rotates in a circle around the origin.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Background(1:70, ground)\nred_ball = Object(1:70, (args...)->object(O, \"red\"), Point(100,0))\nact!(red_ball, Action(anim_rotate_around(2π, O)))","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"The render function stays the same for the rest of this tutorial. Same is true for the myvideo = Video(500, 500) line.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Now that's what I call dancing! However, I think our red ball is a bit lonely, don't you think? It needs a partner!","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"To make another ball appear, execute the following code snippet:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Background(1:70, ground)\nred_ball = Object(1:70, (args...)->object(O, \"red\"), Point(100,0))\nact!(red_ball, Action(anim_rotate_around(2π, O)))\nblue_ball = Object(1:70, (args...)-> object(O, \"blue\"), Point(200,80))\nact!(blue_ball, Action(anim_rotate_around(2π, 0.0, red_ball)))","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"This time we wanted to rotate around an existing object red_ball and in the opposite direction from 2pi to 0.","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"There we go! ","category":"page"},{"location":"tutorials/tutorial_1/#Mapping-an-Orbit","page":"Tutorial 1: Making Your First Javis Animation!","title":"Mapping an Orbit 🚀","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Now, imagine we are astronomers and we model these balls as planets. It would be important to know their orbital trajectories! To do so, let's draw the path that both of the balls take with this new function:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"function path!(points, pos, color)\n    sethue(color)\n    push!(points, pos) # add pos to points\n    circle.(points, 2, :fill) # draws a circle for each point using broadcasting\nend","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"NOTE: The pos takes the position of the red_ball and passes it as an argument into the path! function. ","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Then, using this function, we can execute the following block:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"path_of_red = Point[]\nBackground(1:70, ground)\nred_ball = Object(1:70, (args...)->object(O, \"red\"), Point(100,0))\nact!(red_ball, Action(anim_rotate_around(2π, O)))\nObject(1:70, (args...)->path!(path_of_red, pos(red_ball), \"red\"))","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Fantastic! That's a pretty regular orbit I must say!","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Now, to easily visualize our two \"planets\" (the red and blue balls), let's connect them together.  We can do so by drawing a line that connects both balls:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"function connector(p1, p2, color)\n    sethue(color)\n    line(p1,p2, :stroke)\nend","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"And to show this link:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Background(1:70, ground)\nred_ball = Object(1:70, (args...)->object(O, \"red\"), Point(100,0))\nact!(red_ball, Action(anim_rotate_around(2π, O)))\nblue_ball = Object(1:70, (args...)->object(O, \"blue\"), Point(200,80))\nact!(blue_ball, Action(anim_rotate_around(2π, 0.0, red_ball)))\nObject(1:70, (args...)->connector(pos(red_ball), pos(blue_ball), \"black\"))","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Perfect! Now, let's put everything together to see our orbiting planets' trajectories:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"using Javis\n\nfunction ground(args...)\n    background(\"white\") # canvas background\n    sethue(\"black\") # pen color\nend\n\nfunction object(p=O, color=\"black\")\n    sethue(color)\n    circle(p, 25, :fill)\n    return p\nend\n\nfunction path!(points, pos, color)\n    sethue(color)\n    push!(points, pos) # add pos to points\n    circle.(points, 2, :fill) # draws a circle for each point using broadcasting\nend\n\nfunction connector(p1, p2, color)\n    sethue(color)\n    line(p1,p2, :stroke)\nend\n\nmyvideo = Video(500, 500)\n\npath_of_red = Point[]\npath_of_blue = Point[]\n\nBackground(1:70, ground)\nred_ball = Object(1:70, (args...)->object(O, \"red\"), Point(100,0))\nact!(red_ball, Action(anim_rotate_around(2π, O)))\nblue_ball = Object(1:70, (args...)->object(O, \"blue\"), Point(200,80))\nact!(blue_ball, Action(anim_rotate_around(2π, 0.0, red_ball)))\nObject(1:70, (args...)->connector(pos(red_ball), pos(blue_ball), \"black\"))\nObject(1:70, (args...)->path!(path_of_red, pos(red_ball), \"red\"))\nObject(1:70, (args...)->path!(path_of_blue, pos(blue_ball), \"blue\"))\n\nrender(myvideo; pathname=\"tutorial_1.gif\")","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Do you see any little green men on these planets? 👽 ","category":"page"},{"location":"tutorials/tutorial_1/#Conclusion","page":"Tutorial 1: Making Your First Javis Animation!","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Amazing!!! You have just made your first animation using Javis.jl and we are so proud! I hope you feel like you accomplished something!","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"To recap, by working through this animation you should now:","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Know how to make a simple animation in Javis\nUnderstand the difference between Object and Background\nBe able to connect actions together using the object variable","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"If you want to know more and experiment with Javis, go onto the following tutorials! We wish you the best on your Javis journey!","category":"page"},{"location":"tutorials/tutorial_1/","page":"Tutorial 1: Making Your First Javis Animation!","title":"Tutorial 1: Making Your First Javis Animation!","text":"Author(s): @sudomaze, Ole Kröger, Jacob Zelko \nDate: October 16th, 2020 \nTag(s): action, rotation, object","category":"page"}]
}
