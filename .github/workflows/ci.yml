name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        version:
          - '1.4'
          - '1.5'
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
     # TESTCMD
      - name: Default TESTCMD
        run: echo ::set-env name=TESTCMD::"julia"
      - name: Ubuntu TESTCMD
        if: startsWith(matrix.os,'ubuntu')
        run: echo ::set-env name=TESTCMD::"xvfb-run julia"

      # Julia Dependencies
      - name: Install Julia dependencies
        uses: julia-actions/julia-buildpkg@latest
        
      # Run tests
      - name: Run Graphical test
        run:  $TESTCMD --project -e 'using Pkg; Pkg.test(coverage=true);'
          
      - name: Codecov
        uses: julia-actions/julia-uploadcodecov@latest
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # TESTCMD
      - name: Default TESTCMD
        run: echo ::set-env name=TESTCMD::"julia"
      - name: Ubuntu TESTCMD
        if: startsWith(matrix.os,'ubuntu')
        run: echo ::set-env name=TESTCMD::"xvfb-run julia"
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1.4'
      - run: |
          $TESTCMD --project=docs -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - run: $TESTCMD --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
